import { useState, useMemo } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Switch } from '@/components/ui/switch';
import { toast } from '@/hooks/use-toast';
import { StatusBadge } from '@/components/ui/status-badge';
import { ErrorDisplay } from '@/components/ui/error-boundary';
import { ContentLoading } from '@/components/ui/loading';
import {
  Plus, Calendar as CalendarIcon, Clock, MapPin, Users,
  BookOpen, AlertCircle, CheckCircle, X, Edit, Trash2, Download, Filter, ChevronLeft, ChevronRight
} from 'lucide-react';
import { format, isSameDay, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';
import { useRoleAccess } from '@/hooks/useRoleAccess';
import { useBranch } from '@/contexts/BranchContext';

interface AcademicEvent {
  id: string;
  title: string;
  description?: string;
  event_type: string;
  start_date: string;
  end_date?: string;
  is_all_day: boolean;
  academic_year_id: string;
  term_id?: string;
  color?: string;
  is_recurring: boolean;
  is_public: boolean;
  created_at: string;
}

interface Holiday {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  holiday_type: string;
  description?: string;
  academic_year_id: string;
  is_recurring: boolean;
}

interface AcademicYear {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

interface Term {
  id: string;
  name: string;
  academic_year_id: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

export const AcademicCalendar = () => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [viewMode, setViewMode] = useState<'calendar' | 'events' | 'upcoming' | 'stats'>('calendar');
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<AcademicEvent | null>(null);
  const [eventTypeFilter, setEventTypeFilter] = useState<string>('all');
  const [includeAutoGenerated, setIncludeAutoGenerated] = useState(true);

  // Form state for event creation
  const [eventForm, setEventForm] = useState({
    title: '',
    description: '',
    event_type: '',
    start_date: '',
    end_date: '',
    is_all_day: true,
    term_id: '',
    color: '#3498db',
    is_recurring: false,
    is_public: true,
  });

  const queryClient = useQueryClient();
  const { currentUser, canDelete } = useRoleAccess();
  const { selectedBranch } = useBranch();

  // Get current month range for events
  const monthStart = startOfMonth(selectedDate);
  const monthEnd = endOfMonth(selectedDate);

  // Fetch academic years
  const { data: academicYears = [] } = useQuery({
    queryKey: ['academic-years'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch current academic year
  const { data: currentAcademicYear } = useQuery({
    queryKey: ['current-academic-year'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years/current');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Fetch terms for current academic year
  const { data: terms = [] } = useQuery({
    queryKey: ['terms', currentAcademicYear?.id],
    queryFn: async () => {
      if (!currentAcademicYear?.id) return [];
      const { data, error } = await apiClient.request(`/academic-calendar/terms?academic_year_id=${currentAcademicYear.id}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch events using enhanced calendar API
  const { data: events = [], isLoading: eventsLoading, error: eventsError } = useQuery({
    queryKey: ['enhanced-calendar-events', monthStart.toISOString(), monthEnd.toISOString(), eventTypeFilter, includeAutoGenerated, selectedBranch],
    queryFn: async () => {
      const params = new URLSearchParams({
        start_date: monthStart.toISOString().split('T')[0],
        end_date: monthEnd.toISOString().split('T')[0],
        include_auto_generated: includeAutoGenerated.toString()
      });
      
      if (eventTypeFilter !== 'all') {
        params.append('event_types', eventTypeFilter);
      }
      
      // Add branch filtering
      if (selectedBranch && selectedBranch !== 'all') {
        params.append('branch_id', selectedBranch);
      }
      
      const { data, error } = await apiClient.request(`/calendar/events?${params.toString()}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch classes for mapping
  const { data: classes = [] } = useQuery({
    queryKey: ['classes'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/classes');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch subjects for mapping
  const { data: subjects = [] } = useQuery({
    queryKey: ['subjects'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/subjects');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch upcoming events for quick view
  const { data: upcomingEvents = [] } = useQuery({
    queryKey: ['upcoming-events', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/upcoming-events?days_ahead=14&limit=5');
      if (error) throw new Error(error);
      return data?.events || [];
    },
    refetchInterval: 5 * 60 * 1000 // Refetch every 5 minutes
  });
  
  // Fetch calendar stats
  const { data: calendarStats } = useQuery({
    queryKey: ['calendar-stats', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/stats');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Create event mutation
  const createEventMutation = useMutation({
    mutationFn: async (eventData: any) => {
      console.log('Mutation function called with:', eventData);
      console.log('JSON stringified:', JSON.stringify(eventData));
      const { data, error } = await apiClient.request('/academic-calendar/events', {
        method: 'POST',
        body: JSON.stringify(eventData)
      });
      if (error) throw new Error(error);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['enhanced-calendar-events'] });
      queryClient.invalidateQueries({ queryKey: ['upcoming-events'] });
      queryClient.invalidateQueries({ queryKey: ['calendar-stats'] });
      setIsEventDialogOpen(false);
      resetForm();
      
      toast({
        title: "Success",
        description: "Event created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create event",
        variant: "destructive",
      });
    }
  });

  // Export calendar mutation
  const exportCalendarMutation = useMutation({
    mutationFn: async (format: string) => {
      const params = new URLSearchParams({
        start_date: monthStart.toISOString().split('T')[0],
        end_date: monthEnd.toISOString().split('T')[0]
      });
      
      if (eventTypeFilter !== 'all') {
        params.append('event_types', eventTypeFilter);
      }
      
      const response = await fetch(`/api/calendar/export/${format}?${params.toString()}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to export calendar');
      }
      
      const blob = await response.blob();
      const contentDisposition = response.headers.get('Content-Disposition');
      const filename = contentDisposition?.match(/filename="?([^"]+)"?/)?.[1] || `calendar.${format}`;
      
      return { blob, filename };
    },
    onSuccess: ({ blob, filename }) => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Success",
        description: "Calendar exported successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to export calendar",
        variant: "destructive",
      });
    }
  });

  const handleCreateEvent = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentAcademicYear?.id) {
      toast({
        title: "Error",
        description: "No current academic year found",
        variant: "destructive",
      });
      return;
    }

    // Validate required fields
    if (!eventForm.title.trim()) {
      toast({
        title: "Error",
        description: "Event title is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.event_type) {
      toast({
        title: "Error",
        description: "Event type is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.start_date) {
      toast({
        title: "Error",
        description: "Start date is required",
        variant: "destructive",
      });
      return;
    }

    const eventData = {
      title: eventForm.title.trim(),
      description: eventForm.description?.trim() || undefined,
      event_type: eventForm.event_type,
      start_date: new Date(eventForm.start_date).toISOString(),
      end_date: eventForm.end_date ? new Date(eventForm.end_date).toISOString() : undefined,
      is_all_day: eventForm.is_all_day,
      academic_year_id: currentAcademicYear.id,
      term_id: eventForm.term_id || undefined,
      color: eventForm.color,
      is_recurring: eventForm.is_recurring,
      is_public: eventForm.is_public,
    };

    console.log('Event data being sent:', eventData);
    createEventMutation.mutate(eventData);
  };

  const resetForm = () => {
    const defaultStartDate = format(selectedDate, "yyyy-MM-dd'T'HH:mm");
    console.log('Resetting form with start_date:', defaultStartDate);
    setEventForm({
      title: '',
      description: '',
      event_type: '',
      start_date: defaultStartDate,
      end_date: '',
      is_all_day: true,
      term_id: '',
      color: '#3498db',
      is_recurring: false,
      is_public: true,
    });
  };

  // Events are already combined from the enhanced API
  const allEvents = events;

  // Get events for a specific date
  const getEventsForDate = (date: Date) => {
    const filtered = allEvents.filter(event => {
      const eventStart = new Date(event.start_date);
      const eventEnd = event.end_date ? new Date(event.end_date) : eventStart;
      
      // Use isSameDay from date-fns for more reliable date comparison
      return isSameDay(date, eventStart) || (eventEnd && date >= eventStart && date <= eventEnd);
    });
    
    
    return filtered;
  };

  // Generate calendar days with events
  const calendarDays = useMemo(() => {
    const days = eachDayOfInterval({ start: monthStart, end: monthEnd });
    return days.map(day => ({
      date: day,
      events: getEventsForDate(day),
      isToday: isSameDay(day, new Date()),
      isSelected: isSameDay(day, selectedDate)
    }));
  }, [monthStart, monthEnd, allEvents, selectedDate]);

  const getEventStatusVariant = (eventType: string) => {
    const variants = {
      'holiday': 'error' as const,
      'exam': 'warning' as const,
      'meeting': 'info' as const,
      'event': 'success' as const,
      'deadline': 'error' as const,
      'payment_due': 'warning' as const,
      'report_due': 'info' as const
    };
    return variants[eventType as keyof typeof variants] || 'neutral' as const;
  };

  const getEventTypeIcon = (eventType: string) => {
    const icons = {
      'holiday': '🏖️',
      'exam': '📝',
      'meeting': '🤝',
      'event': '🎉',
      'deadline': '⏰'
    };
    return icons[eventType as keyof typeof icons] || '📅';
  };

  return (
    <>
      {/* Premium Animation Styles */}
      <style jsx global>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(30px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
        @keyframes pulseGlow {
          0%, 100% {
            box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
          }
          50% {
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.8);
          }
        }
        .animate-fadeInUp {
          animation: fadeInUp 0.6s ease-out;
        }
        .animate-slideInRight {
          animation: slideInRight 0.6s ease-out;
        }
        .animate-pulseGlow {
          animation: pulseGlow 2s infinite;
        }
      `}</style>

      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20">
        {/* Premium Header Section */}
        <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-800 pb-20 pt-8">
          {/* Background Pattern */}
          <div className="absolute inset-0 opacity-10">
            <div className="absolute inset-0" style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
            }} />
          </div>

          {/* Floating Shapes */}
          <div className="absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full animate-pulse" />
          <div className="absolute top-20 right-20 w-16 h-16 bg-white/10 rounded-full animate-pulse delay-1000" />
          <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-white/10 rounded-full animate-pulse delay-500" />

          <div className="relative z-10 px-6">
            <div className="flex justify-between items-start mb-8">
              <div className="animate-fadeInUp">
                <div className="flex items-center gap-3 mb-4">
                  <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3">
                    <CalendarIcon className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <h1 className="text-4xl font-bold text-white mb-2">Academic Calendar</h1>
                    <p className="text-blue-100 text-lg">
                      Unified calendar with events from all modules
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex items-center space-x-3 animate-slideInRight">
                {/* Export Dropdown */}
                <Select onValueChange={(format) => exportCalendarMutation.mutate(format)}>
                  <SelectTrigger className="w-40 bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-sm">
                    <Download className="h-4 w-4 mr-2" />
                    <SelectValue placeholder="Export" />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                    <SelectItem value="ical" className="rounded-lg focus:bg-blue-50">📅 iCal (.ics)</SelectItem>
                    <SelectItem value="google" className="rounded-lg focus:bg-blue-50">🌐 Google Calendar</SelectItem>
                    <SelectItem value="outlook" className="rounded-lg focus:bg-blue-50">📧 Outlook (.csv)</SelectItem>
                  </SelectContent>
                </Select>

                <Dialog open={isEventDialogOpen} onOpenChange={(open) => {
                  setIsEventDialogOpen(open);
                  if (open) {
                    resetForm();
                  }
                }}>
                  <DialogTrigger asChild>
                    <Button className="bg-white/20 border-white/30 text-white hover:bg-white/30 backdrop-blur-sm animate-pulseGlow">
                      <Plus className="h-4 w-4 mr-2" />
                      Add Event
                    </Button>
                  </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Create Academic Event</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleCreateEvent} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="title">Event Title</Label>
                    <Input 
                      id="title" 
                      value={eventForm.title}
                      onChange={(e) => setEventForm(prev => ({ ...prev, title: e.target.value }))}
                      required 
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="event_type">Event Type</Label>
                    <Select 
                      value={eventForm.event_type} 
                      onValueChange={(value) => setEventForm(prev => ({ ...prev, event_type: value }))}
                      required
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select event type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="holiday">Holiday</SelectItem>
                        <SelectItem value="exam">Exam</SelectItem>
                        <SelectItem value="meeting">Meeting</SelectItem>
                        <SelectItem value="event">Event</SelectItem>
                        <SelectItem value="deadline">Deadline</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea 
                    id="description" 
                    value={eventForm.description}
                    onChange={(e) => setEventForm(prev => ({ ...prev, description: e.target.value }))}
                    rows={3} 
                  />
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="start_date">Start Date</Label>
                    <Input 
                      id="start_date" 
                      type="datetime-local" 
                      value={eventForm.start_date}
                      onChange={(e) => setEventForm(prev => ({ ...prev, start_date: e.target.value }))}
                      required 
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="end_date">End Date (Optional)</Label>
                    <Input 
                      id="end_date" 
                      type="datetime-local" 
                      value={eventForm.end_date}
                      onChange={(e) => setEventForm(prev => ({ ...prev, end_date: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="color">Color</Label>
                    <Input 
                      id="color" 
                      type="color" 
                      value={eventForm.color}
                      onChange={(e) => setEventForm(prev => ({ ...prev, color: e.target.value }))}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="term_id">Term (Optional)</Label>
                    <Select 
                      value={eventForm.term_id} 
                      onValueChange={(value) => setEventForm(prev => ({ ...prev, term_id: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select term" />
                      </SelectTrigger>
                      <SelectContent>
                        {terms.map((term) => (
                          <SelectItem key={term.id} value={term.id}>
                            {term.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex items-center space-x-6">
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="is_all_day" 
                      checked={eventForm.is_all_day}
                      onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_all_day: checked }))}
                    />
                    <Label htmlFor="is_all_day">All Day</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="is_recurring" 
                      checked={eventForm.is_recurring}
                      onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_recurring: checked }))}
                    />
                    <Label htmlFor="is_recurring">Recurring</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="is_public" 
                      checked={eventForm.is_public}
                      onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_public: checked }))}
                    />
                    <Label htmlFor="is_public">Public</Label>
                  </div>
                </div>

                <div className="flex justify-end space-x-2">
                  <Button type="button" variant="outline" onClick={() => setIsEventDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={createEventMutation.isPending}>
                    {createEventMutation.isPending ? 'Creating...' : 'Create Event'}
                  </Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
            </div>
          </div>

          {/* Wave Bottom */}
          <div className="absolute bottom-0 left-0 right-0">
            <svg className="w-full h-20 fill-current text-slate-50" viewBox="0 0 1440 120">
              <path d="M0,60 C240,120 480,0 720,60 C960,120 1200,0 1440,60 L1440,120 L0,120 Z" />
            </svg>
          </div>
        </div>

        {/* Main Content */}
        <div className="relative z-10 -mt-10 space-y-8 px-6 pb-16">
          {/* Premium Navigation Tabs */}
          <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg animate-fadeInUp">
            <div className="px-8 py-6">
              <div className="flex justify-center items-center">
                <div className="flex items-center space-x-2 bg-gray-100/80 rounded-xl p-1">
                  <Button
                    variant={viewMode === 'calendar' ? 'default' : 'ghost'}
                    onClick={() => setViewMode('calendar')}
                    className={`rounded-lg px-6 py-2 transition-all duration-200 ${
                      viewMode === 'calendar'
                        ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg'
                        : 'text-gray-600 hover:text-blue-600 hover:bg-white/60'
                    }`}
                  >
                    <CalendarIcon className="h-4 w-4 mr-2" />
                    Calendar View
                  </Button>
                  <Button
                    variant={viewMode === 'events' ? 'default' : 'ghost'}
                    onClick={() => setViewMode('events')}
                    className={`rounded-lg px-6 py-2 transition-all duration-200 ${
                      viewMode === 'events'
                        ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg'
                        : 'text-gray-600 hover:text-blue-600 hover:bg-white/60'
                    }`}
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    All Events
                  </Button>
                  <Button
                    variant={viewMode === 'upcoming' ? 'default' : 'ghost'}
                    onClick={() => setViewMode('upcoming')}
                    className={`rounded-lg px-6 py-2 transition-all duration-200 ${
                      viewMode === 'upcoming'
                        ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg'
                        : 'text-gray-600 hover:text-blue-600 hover:bg-white/60'
                    }`}
                  >
                    <AlertCircle className="h-4 w-4 mr-2" />
                    Upcoming
                  </Button>
                  <Button
                    variant={viewMode === 'stats' ? 'default' : 'ghost'}
                    onClick={() => setViewMode('stats')}
                    className={`rounded-lg px-6 py-2 transition-all duration-200 ${
                      viewMode === 'stats'
                        ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg'
                        : 'text-gray-600 hover:text-blue-600 hover:bg-white/60'
                    }`}
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    Statistics
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Premium Filters */}
          <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg animate-fadeInUp" style={{ animationDelay: '0.2s' }}>
            <div className="px-8 py-6 border-b border-blue-100/50">
              <h4 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent flex items-center gap-2">
                <Filter className="h-5 w-5 text-blue-600" />
                Calendar Filters
              </h4>
            </div>
            <div className="p-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-3">
                  <Label className="text-sm font-medium text-gray-700">Event Type</Label>
                  <Select value={eventTypeFilter} onValueChange={setEventTypeFilter}>
                    <SelectTrigger className="bg-white/80 border-blue-200/60 rounded-xl focus:border-blue-400 focus:ring-blue-400/20 transition-all duration-200 hover:bg-white/90">
                      <SelectValue placeholder="All Events" />
                    </SelectTrigger>
                    <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                      <SelectItem value="all" className="rounded-lg focus:bg-blue-50">📅 All Events</SelectItem>
                      <SelectItem value="exam" className="rounded-lg focus:bg-blue-50">📝 Exams</SelectItem>
                      <SelectItem value="payment_due" className="rounded-lg focus:bg-blue-50">💳 Payment Due</SelectItem>
                      <SelectItem value="deadline" className="rounded-lg focus:bg-blue-50">⏰ Deadlines</SelectItem>
                      <SelectItem value="holiday" className="rounded-lg focus:bg-blue-50">🏖️ Holidays</SelectItem>
                      <SelectItem value="meeting" className="rounded-lg focus:bg-blue-50">👥 Meetings</SelectItem>
                      <SelectItem value="event" className="rounded-lg focus:bg-blue-50">🎉 General Events</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-3">
                  <Label className="text-sm font-medium text-gray-700">Auto-Generated Events</Label>
                  <div className="flex items-center space-x-3 bg-blue-50/50 rounded-xl p-4 border border-blue-200/50">
                    <Switch
                      checked={includeAutoGenerated}
                      onCheckedChange={setIncludeAutoGenerated}
                      id="auto-generated"
                      className="data-[state=checked]:bg-blue-600"
                    />
                    <Label htmlFor="auto-generated" className="text-sm text-blue-700 font-medium">Include System Events</Label>
                  </div>
                </div>
                {currentAcademicYear && (
                  <div className="space-y-3">
                    <Label className="text-sm font-medium text-gray-700">Academic Year</Label>
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4 border border-blue-200/50">
                      <p className="font-semibold text-blue-800">{currentAcademicYear.name}</p>
                      <p className="text-sm text-blue-600 mt-1">
                        {format(new Date(currentAcademicYear.start_date), 'MMM yyyy')} - {format(new Date(currentAcademicYear.end_date), 'MMM yyyy')}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

      {/* Legacy Filters for backward compatibility */}
      <div style={{ display: 'none' }}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Calendar Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label>Event Type</Label>
              <Select value={eventTypeFilter} onValueChange={setEventTypeFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="All Events" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Events</SelectItem>
                  <SelectItem value="exam">Exams</SelectItem>
                  <SelectItem value="payment_due">Payment Due</SelectItem>
                  <SelectItem value="deadline">Deadlines</SelectItem>
                  <SelectItem value="holiday">Holidays</SelectItem>
                  <SelectItem value="meeting">Meetings</SelectItem>
                  <SelectItem value="event">General Events</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                checked={includeAutoGenerated}
                onCheckedChange={setIncludeAutoGenerated}
                id="auto-generated"
              />
              <Label htmlFor="auto-generated">Include Auto-Generated Events</Label>
            </div>
            {currentAcademicYear && (
              <div>
                <Label>Academic Year</Label>
                <p className="font-medium">{currentAcademicYear.name}</p>
                <p className="text-sm text-muted-foreground">
                  {format(new Date(currentAcademicYear.start_date), 'MMM dd')} - {format(new Date(currentAcademicYear.end_date), 'MMM dd, yyyy')}
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
      </div>

      {/* Premium Calendar View */}
      {viewMode === 'calendar' && (
        <div className="grid gap-8 lg:grid-cols-4 animate-fadeInUp">
          <div className="lg:col-span-3">
            {/* Premium Calendar Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-lg overflow-hidden">
              {/* Calendar Header */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 px-8 py-6 border-b border-blue-100/50">
                <div className="flex items-center justify-between">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                    📅 {format(selectedDate, 'MMMM yyyy')}
                  </h3>
                  <div className="flex items-center gap-3">
                    <Button
                      variant="outline"
                      size="sm"
                      className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                      onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1, 1))}
                    >
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      className="rounded-xl bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700 shadow-lg transition-all duration-200"
                      onClick={() => setSelectedDate(new Date())}
                    >
                      Today
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                      onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1))}
                    >
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
              {/* Calendar Content */}
              <div className="p-8">
                {/* Day Headers */}
                <div className="grid grid-cols-7 gap-2 mb-6">
                  {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => (
                    <div key={day} className="p-3 text-center font-semibold text-sm text-blue-600 bg-blue-50/50 rounded-xl">
                      {day.slice(0, 3)}
                    </div>
                  ))}
                </div>

                {/* Calendar Grid */}
                <div className="grid grid-cols-7 gap-2">
                  {calendarDays.map(({ date, events, isToday, isSelected }) => (
                    <div
                      key={date.toISOString()}
                      className={`
                        relative p-3 min-h-[100px] border-2 rounded-2xl cursor-pointer transition-all duration-300 group hover:scale-105
                        ${isToday
                          ? 'bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-300 shadow-lg ring-2 ring-blue-200'
                          : ''
                        }
                        ${isSelected
                          ? 'bg-gradient-to-br from-blue-100 to-indigo-100 border-blue-400 shadow-premium'
                          : 'border-gray-200 hover:border-blue-200 hover:bg-blue-50/30'
                        }
                      `}
                      onClick={() => setSelectedDate(date)}
                    >
                      {/* Date Number */}
                      <div className={`font-bold text-lg mb-2 ${
                        isToday
                          ? 'text-blue-700'
                          : isSelected
                            ? 'text-blue-600'
                            : 'text-gray-700'
                      }`}>
                        {format(date, 'd')}
                      </div>

                      {/* Events */}
                      <div className="space-y-1">
                        {events.slice(0, 2).map((event, index) => (
                          <div
                            key={event.id}
                            className="bg-white/80 backdrop-blur-sm rounded-lg px-2 py-1 text-xs font-medium shadow-sm border border-white/40 hover:bg-white transition-all duration-200"
                            title={event.title}
                          >
                            <div className="flex items-center gap-1 truncate">
                              <span>{getEventTypeIcon(event.event_type)}</span>
                              <span className="truncate">{event.title}</span>
                            </div>
                          </div>
                        ))}
                        {events.length > 2 && (
                          <div className="text-xs text-blue-600 font-medium bg-blue-50/80 rounded-lg px-2 py-1 text-center">
                            +{events.length - 2} more
                          </div>
                        )}
                      </div>

                      {/* Today Indicator */}
                      {isToday && (
                        <div className="absolute top-2 right-2 w-3 h-3 bg-blue-500 rounded-full animate-pulseGlow shadow-lg"></div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Premium Day Details Sidebar */}
          <div className="space-y-6 animate-slideInRight">
            {/* Selected Day Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden">
              {/* Day Header */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-blue-100/50">
                <h3 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                  🗓️ {format(selectedDate, 'EEEE, MMMM dd, yyyy')}
                </h3>
              </div>

              {/* Day Events */}
              <div className="p-6">
                {getEventsForDate(selectedDate).length > 0 ? (
                  <div className="space-y-4">
                    {getEventsForDate(selectedDate).map((event) => (
                      <div key={event.id} className="bg-white/70 backdrop-blur-sm rounded-xl p-4 border border-white/40 shadow-sm hover:shadow-md hover:bg-white/90 transition-all duration-200">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-3">
                              <div className={`px-3 py-1 rounded-lg text-xs font-semibold ${
                                event.event_type === 'exam' ? 'bg-red-100 text-red-700' :
                                event.event_type === 'payment_due' ? 'bg-orange-100 text-orange-700' :
                                event.event_type === 'deadline' ? 'bg-yellow-100 text-yellow-700' :
                                event.event_type === 'holiday' ? 'bg-green-100 text-green-700' :
                                event.event_type === 'meeting' ? 'bg-purple-100 text-purple-700' :
                                'bg-blue-100 text-blue-700'
                              }`}>
                                {getEventTypeIcon(event.event_type)} {event.event_type}
                              </div>
                              {event.auto_generated && (
                                <div className="bg-gray-100 text-gray-600 px-2 py-1 rounded-md text-xs font-medium">
                                  🤖 Auto
                                </div>
                              )}
                            </div>
                            <div className="font-semibold text-gray-800 mb-2">{event.title}</div>
                            {event.description && (
                              <div className="text-sm text-gray-600 mb-3 leading-relaxed">{event.description}</div>
                            )}
                            <div className="flex items-center text-sm text-blue-600 font-medium">
                              <Clock className="h-4 w-4 mr-2" />
                              {event.is_all_day ? '🕐 All day' : '⏰ ' + format(new Date(event.start_date), 'HH:mm')}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <div className="bg-blue-50 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                      <CalendarIcon className="h-10 w-10 text-blue-400" />
                    </div>
                    <h4 className="text-lg font-semibold text-gray-700 mb-2">No events scheduled</h4>
                    <p className="text-gray-500 text-sm">This day is free from events</p>
                  </div>
                )}
              </div>
            </div>

            {/* Premium Quick Actions Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden">
              <div className="bg-gradient-to-r from-indigo-50 to-purple-50 px-6 py-4 border-b border-indigo-100/50">
                <h3 className="text-lg font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                  ⚡ Quick Actions
                </h3>
              </div>
              <div className="p-6">
                <div className="space-y-3">
                  <Button
                    className="w-full justify-start bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl shadow-lg transition-all duration-200 hover:scale-105"
                    onClick={() => setIsEventDialogOpen(true)}
                  >
                    <Plus className="h-4 w-4 mr-3" />
                    📅 Add Event
                  </Button>
                  <Button
                    variant="outline"
                    className="w-full justify-start rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                    onClick={() => setViewMode('events')}
                  >
                    <BookOpen className="h-4 w-4 mr-3" />
                    📋 View All Events
                  </Button>
                  <Button
                    variant="outline"
                    className="w-full justify-start rounded-xl border-orange-200 text-orange-600 hover:bg-orange-50 hover:border-orange-300 transition-all duration-200"
                  >
                    <AlertCircle className="h-4 w-4 mr-3" />
                    ⏰ Upcoming Deadlines
                  </Button>
                </div>
              </div>
            </div>

            {/* Premium Upcoming Events */}
            {upcomingEvents.length > 0 && (
              <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden">
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-green-100/50">
                  <h3 className="text-lg font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                    🚀 Upcoming Events
                  </h3>
                </div>
                <div className="p-6">
                  <div className="space-y-3">
                    {upcomingEvents.map((event: any) => {
                      const eventDate = new Date(event.start_date);
                      const daysUntil = event.days_until || 0;
                      return (
                        <div
                          key={event.id}
                          className="bg-white/70 backdrop-blur-sm rounded-xl p-4 border border-white/40 shadow-sm hover:shadow-md hover:bg-white/90 transition-all duration-200 cursor-pointer"
                          onClick={() => setSelectedDate(eventDate)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3 flex-1">
                              <div className="bg-blue-100 rounded-lg p-2">
                                <CalendarIcon className="h-4 w-4 text-blue-600" />
                              </div>
                              <div className="flex-1">
                                <div className="font-semibold text-gray-800 text-sm mb-1">{event.title}</div>
                                <div className="flex items-center gap-2">
                                  <div className={`px-2 py-1 rounded-md text-xs font-medium ${
                                    event.event_type === 'exam' ? 'bg-red-100 text-red-700' :
                                    event.event_type === 'payment_due' ? 'bg-orange-100 text-orange-700' :
                                    event.event_type === 'deadline' ? 'bg-yellow-100 text-yellow-700' :
                                    event.event_type === 'holiday' ? 'bg-green-100 text-green-700' :
                                    event.event_type === 'meeting' ? 'bg-purple-100 text-purple-700' :
                                    'bg-blue-100 text-blue-700'
                                  }`}>
                                    {getEventTypeIcon(event.event_type)} {event.event_type}
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className={`text-sm font-bold ${
                                daysUntil === 0 ? 'text-red-600' :
                                daysUntil === 1 ? 'text-orange-600' :
                                daysUntil <= 3 ? 'text-yellow-600' :
                                'text-blue-600'
                              }`}>
                                {daysUntil === 0 ? '🔴 Today' :
                                 daysUntil === 1 ? '🟡 Tomorrow' :
                                 '⏱️ ' + daysUntil + ' days'}
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Premium Events List View */}
      {viewMode === 'events' && (
        <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-lg overflow-hidden animate-fadeInUp">
          {/* Events Header */}
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 px-8 py-6 border-b border-purple-100/50">
            <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              📋 All Events
            </h2>
            <p className="text-purple-600/70 mt-2">Complete overview of all calendar events</p>
          </div>

          {/* Events Content */}
          <div className="p-8">
            {eventsLoading ? (
              <div className="flex items-center justify-center py-16">
                <div className="bg-blue-50 rounded-full w-16 h-16 flex items-center justify-center animate-spin">
                  <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full"></div>
                </div>
              </div>
            ) : eventsError ? (
              <div className="text-center py-16">
                <div className="bg-red-50 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                  <AlertCircle className="h-10 w-10 text-red-500" />
                </div>
                <h3 className="text-lg font-semibold text-gray-800 mb-2">Failed to load events</h3>
                <p className="text-gray-600 mb-4">There was an error loading the events</p>
                <Button
                  onClick={() => queryClient.invalidateQueries({ queryKey: ['enhanced-calendar-events'] })}
                  className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white rounded-xl"
                >
                  Try Again
                </Button>
              </div>
            ) : (
              <div className="space-y-6">
                {allEvents.map((event) => (
                  <div key={event.id} className="bg-white/70 backdrop-blur-sm rounded-2xl p-6 border border-white/40 shadow-lg hover:shadow-xl hover:bg-white/90 transition-all duration-300 group">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        {/* Event Header */}
                        <div className="flex items-center gap-3 mb-4">
                          <div className="bg-gradient-to-br from-blue-100 to-indigo-100 rounded-xl p-3">
                            <span className="text-2xl">{getEventTypeIcon(event.event_type)}</span>
                          </div>
                          <div className="flex-1">
                            <h3 className="font-bold text-xl text-gray-800 mb-2">{event.title}</h3>
                            <div className="flex items-center gap-3">
                              <div className={`px-3 py-1 rounded-lg text-sm font-semibold ${
                                event.event_type === 'exam' ? 'bg-red-100 text-red-700' :
                                event.event_type === 'payment_due' ? 'bg-orange-100 text-orange-700' :
                                event.event_type === 'deadline' ? 'bg-yellow-100 text-yellow-700' :
                                event.event_type === 'holiday' ? 'bg-green-100 text-green-700' :
                                event.event_type === 'meeting' ? 'bg-purple-100 text-purple-700' :
                                'bg-blue-100 text-blue-700'
                              }`}>
                                {event.event_type}
                              </div>
                              {event.auto_generated && (
                                <div className="bg-gray-100 text-gray-600 px-3 py-1 rounded-lg text-sm font-medium">
                                  🤖 Auto-Generated
                                </div>
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Event Description */}
                        {event.description && (
                          <div className="bg-blue-50/50 rounded-xl p-4 mb-4">
                            <p className="text-gray-700 leading-relaxed">{event.description}</p>
                          </div>
                        )}

                        {/* Event Details */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="flex items-center gap-3 bg-white/60 rounded-xl p-3">
                            <div className="bg-blue-100 rounded-lg p-2">
                              <CalendarIcon className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                              <div className="text-xs text-gray-500 font-medium">Date</div>
                              <div className="font-semibold text-gray-800">
                                {format(new Date(event.start_date), 'MMM dd, yyyy')}
                              </div>
                            </div>
                          </div>

                          {!event.is_all_day && (
                            <div className="flex items-center gap-3 bg-white/60 rounded-xl p-3">
                              <div className="bg-green-100 rounded-lg p-2">
                                <Clock className="h-4 w-4 text-green-600" />
                              </div>
                              <div>
                                <div className="text-xs text-gray-500 font-medium">Time</div>
                                <div className="font-semibold text-gray-800">
                                  {format(new Date(event.start_date), 'HH:mm')}
                                </div>
                              </div>
                            </div>
                          )}

                          <div className="flex items-center gap-3 bg-white/60 rounded-xl p-3">
                            <div className="bg-purple-100 rounded-lg p-2">
                              <Users className="h-4 w-4 text-purple-600" />
                            </div>
                            <div>
                              <div className="text-xs text-gray-500 font-medium">Audience</div>
                              <div className="font-semibold text-gray-800">
                                {event.target_audience || 'All'}
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Additional Metadata */}
                        {event.metadata && Object.keys(event.metadata).length > 0 && (
                          <div className="mt-4 bg-gray-50/50 rounded-xl p-3">
                            <details className="group">
                              <summary className="cursor-pointer text-sm font-medium text-gray-600 hover:text-gray-800 flex items-center gap-2">
                                📝 Additional Details
                                <ChevronRight className="h-4 w-4 group-open:rotate-90 transition-transform" />
                              </summary>
                              <div className="mt-3 space-y-2">
                                {Object.entries(event.metadata).map(([key, value]) => (
                                  <div key={key} className="flex justify-between text-sm">
                                    <span className="font-medium text-gray-600">{key}:</span>
                                    <span className="text-gray-800">{String(value)}</span>
                                  </div>
                                ))}
                              </div>
                            </details>
                          </div>
                        )}
                      </div>

                      {/* Action Buttons */}
                      {!event.auto_generated && canDelete && (
                        <div className="flex flex-col gap-2 ml-4">
                          <Button
                            variant="outline"
                            size="sm"
                            className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                          >
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="rounded-xl border-red-200 text-red-600 hover:bg-red-50 hover:border-red-300 transition-all duration-200"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Premium Upcoming Events View */}
      {viewMode === 'upcoming' && (
        <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-lg overflow-hidden animate-fadeInUp">
          {/* Upcoming Events Header */}
          <div className="bg-gradient-to-r from-orange-50 to-amber-50 px-8 py-6 border-b border-orange-100/50">
            <h2 className="text-2xl font-bold bg-gradient-to-r from-orange-600 to-amber-600 bg-clip-text text-transparent">
              ⏰ Upcoming Events
            </h2>
            <p className="text-orange-600/70 mt-2">Next 14 days overview</p>
          </div>

          {/* Upcoming Events Content */}
          <div className="p-8">
            {upcomingEvents.length > 0 ? (
              <div className="space-y-6">
                {upcomingEvents.map((event) => {
                  const daysUntil = event.days_until || 0;
                  const isOverdue = event.is_overdue || false;

                  return (
                    <div key={event.id} className={`bg-white/70 backdrop-blur-sm rounded-2xl p-6 border-2 shadow-lg hover:shadow-xl transition-all duration-300 group ${
                      isOverdue
                        ? 'border-red-300 bg-gradient-to-r from-red-50 to-pink-50 hover:border-red-400'
                        : daysUntil === 0
                          ? 'border-yellow-300 bg-gradient-to-r from-yellow-50 to-orange-50 hover:border-yellow-400'
                          : daysUntil === 1
                            ? 'border-blue-300 bg-gradient-to-r from-blue-50 to-indigo-50 hover:border-blue-400'
                            : 'border-gray-200 hover:border-green-300 hover:bg-green-50/30'
                    }`}>
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          {/* Event Priority Badge */}
                          <div className="flex items-center gap-3 mb-4">
                            <div className={`px-4 py-2 rounded-xl text-sm font-bold ${
                              isOverdue
                                ? 'bg-red-100 text-red-700 ring-2 ring-red-200'
                                : daysUntil === 0
                                  ? 'bg-yellow-100 text-yellow-700 ring-2 ring-yellow-200'
                                  : daysUntil === 1
                                    ? 'bg-blue-100 text-blue-700 ring-2 ring-blue-200'
                                    : 'bg-green-100 text-green-700'
                            }`}>
                              {getEventTypeIcon(event.event_type)} {event.event_type}
                            </div>
                            {event.auto_generated && (
                              <div className="bg-gray-100 text-gray-600 px-3 py-1 rounded-lg text-sm font-medium">
                                🤖 Auto
                              </div>
                            )}
                          </div>

                          {/* Event Title */}
                          <h3 className="font-bold text-xl text-gray-800 mb-3">{event.title}</h3>

                          {/* Event Description */}
                          {event.description && (
                            <div className="bg-white/60 rounded-xl p-4 mb-4">
                              <p className="text-gray-700 leading-relaxed">{event.description}</p>
                            </div>
                          )}

                          {/* Event Details */}
                          <div className="flex items-center gap-6">
                            <div className="flex items-center gap-3 bg-white/60 rounded-xl p-3">
                              <div className="bg-blue-100 rounded-lg p-2">
                                <CalendarIcon className="h-4 w-4 text-blue-600" />
                              </div>
                              <div>
                                <div className="text-xs text-gray-500 font-medium">Date</div>
                                <div className="font-semibold text-gray-800">
                                  {format(new Date(event.start_date), 'MMM dd, yyyy')}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Urgency Indicator */}
                        <div className="ml-6 text-center">
                          <div className={`inline-flex items-center justify-center w-20 h-20 rounded-2xl text-lg font-black ${
                            isOverdue
                              ? 'bg-red-100 text-red-700 ring-4 ring-red-200 animate-pulse'
                              : daysUntil === 0
                                ? 'bg-yellow-100 text-yellow-700 ring-4 ring-yellow-200 animate-pulseGlow'
                                : daysUntil === 1
                                  ? 'bg-blue-100 text-blue-700 ring-4 ring-blue-200'
                                  : 'bg-green-100 text-green-700'
                          }`}>
                            {isOverdue ? '⚠️' :
                             daysUntil === 0 ? '🔥' :
                             daysUntil === 1 ? '⏳' :
                             daysUntil + 'd'}
                          </div>
                          <div className={`mt-2 text-sm font-bold ${
                            isOverdue ? 'text-red-600' :
                            daysUntil === 0 ? 'text-yellow-600' :
                            daysUntil === 1 ? 'text-blue-600' : 'text-green-600'
                          }`}>
                            {isOverdue ? 'OVERDUE' :
                             daysUntil === 0 ? 'TODAY' :
                             daysUntil === 1 ? 'TOMORROW' :
                             'UPCOMING'}
                            </div>
                          </div>
                        </div>

                        {/* Action Button */}
                        <div className="mt-4 pt-4 border-t border-white/40">
                          <Button
                            className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl shadow-lg transition-all duration-200 hover:scale-105"
                            onClick={() => {
                              setSelectedDate(new Date(event.start_date));
                              setViewMode('calendar');
                            }}
                          >
                            📅 View in Calendar
                          </Button>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="bg-orange-50 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                  <CalendarIcon className="h-10 w-10 text-orange-400" />
                </div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">No upcoming events</h3>
                <p className="text-gray-500">No events scheduled for the next 14 days</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Premium Statistics View */}
      {viewMode === 'stats' && calendarStats && (
        <div className="space-y-8 animate-fadeInUp">
          {/* Statistics Header */}
          <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-lg overflow-hidden">
            <div className="bg-gradient-to-r from-emerald-50 to-teal-50 px-8 py-6 border-b border-emerald-100/50">
              <h2 className="text-2xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
                📊 Calendar Statistics
              </h2>
              <p className="text-emerald-600/70 mt-2">Overview of your calendar data and insights</p>
            </div>
          </div>

          {/* Premium Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Upcoming Events Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden group hover:shadow-premium-lg transition-all duration-300">
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-blue-100/50">
                <h3 className="text-lg font-bold text-blue-800">📅 Upcoming Events</h3>
                <p className="text-blue-600/70 text-sm">Next 7 days</p>
              </div>
              <div className="p-6">
                <div className="text-4xl font-black text-blue-600 mb-2">{calendarStats.upcoming_events_week}</div>
                <div className="text-sm text-gray-600">events scheduled</div>
                <div className="mt-4 bg-blue-50 rounded-xl p-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-blue-700 font-medium">Priority level:</span>
                    <span className="text-blue-600 font-bold">
                      {calendarStats.upcoming_events_week > 5 ? '🔥 High' :
                       calendarStats.upcoming_events_week > 2 ? '⚡ Medium' : '🌊 Low'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Overdue Events Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden group hover:shadow-premium-lg transition-all duration-300">
              <div className="bg-gradient-to-r from-red-50 to-pink-50 px-6 py-4 border-b border-red-100/50">
                <h3 className="text-lg font-bold text-red-800">⚠️ Overdue Events</h3>
                <p className="text-red-600/70 text-sm">Needs attention</p>
              </div>
              <div className="p-6">
                <div className="text-4xl font-black text-red-600 mb-2">{calendarStats.overdue_events}</div>
                <div className="text-sm text-gray-600">overdue items</div>
                <div className="mt-4 bg-red-50 rounded-xl p-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-red-700 font-medium">Status:</span>
                    <span className="text-red-600 font-bold">
                      {calendarStats.overdue_events === 0 ? '✅ All Clear' : '🚨 Action Needed'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Auto-Generated Events Card */}
            <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden group hover:shadow-premium-lg transition-all duration-300">
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 px-6 py-4 border-b border-green-100/50">
                <h3 className="text-lg font-bold text-green-800">🤖 Auto-Generated</h3>
                <p className="text-green-600/70 text-sm">System events</p>
              </div>
              <div className="p-6">
                <div className="text-4xl font-black text-green-600 mb-2">{calendarStats.event_sources?.auto_generated || 0}</div>
                <div className="text-sm text-gray-600">automated events</div>
                <div className="mt-4 bg-green-50 rounded-xl p-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-green-700 font-medium">Manual events:</span>
                    <span className="text-green-600 font-bold">{calendarStats.event_sources?.manual || 0}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Premium Event Types Breakdown */}
          <div className="bg-white/90 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium overflow-hidden">
            <div className="bg-gradient-to-r from-purple-50 to-violet-50 px-6 py-4 border-b border-purple-100/50">
              <h3 className="text-xl font-bold text-purple-800">📈 Events by Type (This Month)</h3>
              <p className="text-purple-600/70 text-sm mt-1">Breakdown of event categories</p>
            </div>
            <div className="p-6">
              {calendarStats.current_month?.event_types?.length > 0 ? (
                <div className="space-y-4">
                  {calendarStats.current_month.event_types.map((eventType: any) => (
                    <div key={eventType.type} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <StatusBadge variant={getEventStatusVariant(eventType.type)} size="sm">
                          {eventType.type}
                        </StatusBadge>
                      </div>
                      <div className="font-medium">{eventType.count}</div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-4 text-muted-foreground">
                  No events this month
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default AcademicCalendar;