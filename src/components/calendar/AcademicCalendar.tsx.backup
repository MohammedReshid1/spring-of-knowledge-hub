import { useState, useMemo } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Switch } from '@/components/ui/switch';
import { toast } from '@/hooks/use-toast';
import { StatusBadge } from '@/components/ui/status-badge';
import { ErrorDisplay } from '@/components/ui/error-boundary';
import { ContentLoading } from '@/components/ui/loading';
import {
  Plus, Calendar as CalendarIcon, CalendarDays, Clock, MapPin, Users,
  BookOpen, AlertCircle, CheckCircle, X, Edit, Trash2, Download, Filter, Tag
} from 'lucide-react';
import { format, isSameDay, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';
import { useRoleAccess } from '@/hooks/useRoleAccess';
import { useBranch } from '@/contexts/BranchContext';

interface AcademicEvent {
  id: string;
  title: string;
  description?: string;
  event_type: string;
  start_date: string;
  end_date?: string;
  is_all_day: boolean;
  academic_year_id: string;
  term_id?: string;
  color?: string;
  is_recurring: boolean;
  is_public: boolean;
  created_at: string;
}

interface Holiday {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  holiday_type: string;
  description?: string;
  academic_year_id: string;
  is_recurring: boolean;
}

interface AcademicYear {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

interface Term {
  id: string;
  name: string;
  academic_year_id: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

export const AcademicCalendar = () => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [viewMode, setViewMode] = useState<'calendar' | 'events' | 'upcoming' | 'stats'>('calendar');
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<AcademicEvent | null>(null);
  const [eventTypeFilter, setEventTypeFilter] = useState<string>('all');
  const [includeAutoGenerated, setIncludeAutoGenerated] = useState(true);

  // Form state for event creation
  const [eventForm, setEventForm] = useState({
    title: '',
    description: '',
    event_type: '',
    start_date: '',
    end_date: '',
    is_all_day: true,
    term_id: '',
    color: '#3498db',
    is_recurring: false,
    is_public: true,
  });

  const queryClient = useQueryClient();
  const { currentUser, canDelete } = useRoleAccess();
  const { selectedBranch } = useBranch();

  // Get current month range for events
  const monthStart = startOfMonth(selectedDate);
  const monthEnd = endOfMonth(selectedDate);

  // Fetch academic years
  const { data: academicYears = [] } = useQuery({
    queryKey: ['academic-years'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch current academic year
  const { data: currentAcademicYear } = useQuery({
    queryKey: ['current-academic-year'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years/current');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Fetch terms for current academic year
  const { data: terms = [] } = useQuery({
    queryKey: ['terms', currentAcademicYear?.id],
    queryFn: async () => {
      if (!currentAcademicYear?.id) return [];
      const { data, error } = await apiClient.request(`/academic-calendar/terms?academic_year_id=${currentAcademicYear.id}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch events using enhanced calendar API
  const { data: events = [], isLoading: eventsLoading, error: eventsError } = useQuery({
    queryKey: ['enhanced-calendar-events', monthStart.toISOString(), monthEnd.toISOString(), eventTypeFilter, includeAutoGenerated, selectedBranch],
    queryFn: async () => {
      const params = new URLSearchParams({
        start_date: monthStart.toISOString().split('T')[0],
        end_date: monthEnd.toISOString().split('T')[0],
        include_auto_generated: includeAutoGenerated.toString()
      });
      
      if (eventTypeFilter !== 'all') {
        params.append('event_types', eventTypeFilter);
      }
      
      // Add branch filtering
      if (selectedBranch && selectedBranch !== 'all') {
        params.append('branch_id', selectedBranch);
      }
      
      const { data, error } = await apiClient.request(`/calendar/events?${params.toString()}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch classes for mapping
  const { data: classes = [] } = useQuery({
    queryKey: ['classes'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/classes');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch subjects for mapping
  const { data: subjects = [] } = useQuery({
    queryKey: ['subjects'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/subjects');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch upcoming events for quick view
  const { data: upcomingEvents = [] } = useQuery({
    queryKey: ['upcoming-events', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/upcoming-events?days_ahead=14&limit=5');
      if (error) throw new Error(error);
      return data?.events || [];
    },
    refetchInterval: 5 * 60 * 1000 // Refetch every 5 minutes
  });
  
  // Fetch calendar stats
  const { data: calendarStats } = useQuery({
    queryKey: ['calendar-stats', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/stats');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Create event mutation
  const createEventMutation = useMutation({
    mutationFn: async (eventData: any) => {
      console.log('Mutation function called with:', eventData);
      console.log('JSON stringified:', JSON.stringify(eventData));
      const { data, error } = await apiClient.request('/academic-calendar/events', {
        method: 'POST',
        body: JSON.stringify(eventData)
      });
      if (error) throw new Error(error);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['enhanced-calendar-events'] });
      queryClient.invalidateQueries({ queryKey: ['upcoming-events'] });
      queryClient.invalidateQueries({ queryKey: ['calendar-stats'] });
      setIsEventDialogOpen(false);
      resetForm();
      
      toast({
        title: "Success",
        description: "Event created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create event",
        variant: "destructive",
      });
    }
  });

  // Export calendar mutation
  const exportCalendarMutation = useMutation({
    mutationFn: async (format: string) => {
      const params = new URLSearchParams({
        start_date: monthStart.toISOString().split('T')[0],
        end_date: monthEnd.toISOString().split('T')[0]
      });
      
      if (eventTypeFilter !== 'all') {
        params.append('event_types', eventTypeFilter);
      }
      
      const response = await fetch(`/api/calendar/export/${format}?${params.toString()}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to export calendar');
      }
      
      const blob = await response.blob();
      const contentDisposition = response.headers.get('Content-Disposition');
      const filenameMatch = contentDisposition?.match(/filename="?([^"]+)"?/);
      const filename = filenameMatch?.[1] || `calendar.${format}`;
      
      return { blob, filename };
    },
    onSuccess: ({ blob, filename }) => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Success",
        description: "Calendar exported successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to export calendar",
        variant: "destructive",
      });
    }
  });

  const handleCreateEvent = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentAcademicYear?.id) {
      toast({
        title: "Error",
        description: "No current academic year found",
        variant: "destructive",
      });
      return;
    }

    // Validate required fields
    if (!eventForm.title.trim()) {
      toast({
        title: "Error",
        description: "Event title is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.event_type) {
      toast({
        title: "Error",
        description: "Event type is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.start_date) {
      toast({
        title: "Error",
        description: "Start date is required",
        variant: "destructive",
      });
      return;
    }

    const eventData = {
      title: eventForm.title.trim(),
      description: eventForm.description?.trim() || undefined,
      event_type: eventForm.event_type,
      start_date: new Date(eventForm.start_date).toISOString(),
      end_date: eventForm.end_date ? new Date(eventForm.end_date).toISOString() : undefined,
      is_all_day: eventForm.is_all_day,
      academic_year_id: currentAcademicYear.id,
      term_id: eventForm.term_id || undefined,
      color: eventForm.color,
      is_recurring: eventForm.is_recurring,
      is_public: eventForm.is_public,
    };

    console.log('Event data being sent:', eventData);
    createEventMutation.mutate(eventData);
  };

  const resetForm = () => {
    const defaultStartDate = format(selectedDate, "yyyy-MM-dd'T'HH:mm");
    console.log('Resetting form with start_date:', defaultStartDate);
    setEventForm({
      title: '',
      description: '',
      event_type: '',
      start_date: defaultStartDate,
      end_date: '',
      is_all_day: true,
      term_id: '',
      color: '#3498db',
      is_recurring: false,
      is_public: true,
    });
  };

  // Events are already combined from the enhanced API
  const allEvents = events;

  // Get events for a specific date
  const getEventsForDate = (date: Date) => {
    const filtered = allEvents.filter(event => {
      const eventStart = new Date(event.start_date);
      const eventEnd = event.end_date ? new Date(event.end_date) : eventStart;
      
      // Use isSameDay from date-fns for more reliable date comparison
      return isSameDay(date, eventStart) || (eventEnd && date >= eventStart && date <= eventEnd);
    });
    
    
    return filtered;
  };

  // Generate calendar days with events
  const calendarDays = useMemo(() => {
    const days = eachDayOfInterval({ start: monthStart, end: monthEnd });
    return days.map(day => ({
      date: day,
      events: getEventsForDate(day),
      isToday: isSameDay(day, new Date()),
      isSelected: isSameDay(day, selectedDate)
    }));
  }, [monthStart, monthEnd, allEvents, selectedDate]);

  const getEventStatusVariant = (eventType: string) => {
    const variants = {
      'holiday': 'error' as const,
      'exam': 'warning' as const,
      'meeting': 'info' as const,
      'event': 'success' as const,
      'deadline': 'error' as const,
      'payment_due': 'warning' as const,
      'report_due': 'info' as const
    };
    return variants[eventType as keyof typeof variants] || 'neutral' as const;
  };

  const getEventTypeIcon = (eventType: string) => {
    const icons = {
      'holiday': '🏖️',
      'exam': '📝',
      'meeting': '🤝',
      'event': '🎉',
      'deadline': '⏰'
    };
    return icons[eventType as keyof typeof icons] || '📅';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20">
      {/* Premium Header Section */}
      <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-800 pb-20 pt-8">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0" style={{
            backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Ccircle cx='30' cy='30' r='2'%2F%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E")`,
          }} />
        </div>

        {/* Floating Shapes */}
        <div className="absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full animate-pulse" />
        <div className="absolute top-20 right-20 w-16 h-16 bg-white/10 rounded-full animate-pulse delay-1000" />
        <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-white/10 rounded-full animate-pulse delay-500" />

        <div className="relative z-10 px-6">
          <div className="flex justify-between items-start mb-8">
            <div className="animate-fadeInUp">
              <div className="flex items-center gap-3 mb-4">
                <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3">
                  <CalendarIcon className="h-8 w-8 text-white" />
                </div>
                <div>
                  <h1 className="text-4xl font-bold text-white mb-2">Academic Calendar</h1>
                  <p className="text-blue-100 text-lg">
                    Unified calendar with events from all modules - {currentAcademicYear?.name || 'Loading...'}
                  </p>
                </div>
              </div>
            </div>

            {/* Add Event Button */}
            <Dialog open={isEventDialogOpen} onOpenChange={(open) => {
              setIsEventDialogOpen(open);
              if (open) {
                resetForm();
              }
            }}>
              <DialogTrigger asChild>
                <Button className="bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-sm animate-slideInRight">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Event
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto bg-white/95 backdrop-blur-premium border border-white/40 rounded-3xl shadow-premium-xl">
                {/* Premium Background Effects */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/8 via-indigo-500/8 to-blue-500/8 rounded-3xl pointer-events-none"></div>
                <div className="absolute inset-0 bg-gradient-to-tr from-white/20 via-transparent to-white/10 rounded-3xl pointer-events-none"></div>

                <div className="relative z-10">
                  <DialogHeader className="pb-6">
                    <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">Create Academic Event</DialogTitle>
                  </DialogHeader>

                  <form onSubmit={handleCreateEvent} className="space-y-6">
                    {/* Event Details Section */}
                    <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50 shadow-premium">
                      <h3 className="text-lg font-semibold text-slate-800 mb-4 flex items-center gap-2">
                        <div className="bg-blue-100 rounded-lg p-2">
                          <CalendarIcon className="h-5 w-5 text-blue-600" />
                        </div>
                        Event Details
                      </h3>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="title" className="text-slate-700 font-medium">Event Title</Label>
                          <Input
                            id="title"
                            value={eventForm.title}
                            onChange={(e) => setEventForm(prev => ({ ...prev, title: e.target.value }))}
                            className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm"
                            placeholder="Enter event title..."
                            required
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="event_type" className="text-slate-700 font-medium">Event Type</Label>
                          <Select
                            value={eventForm.event_type}
                            onValueChange={(value) => setEventForm(prev => ({ ...prev, event_type: value }))}
                            required
                          >
                            <SelectTrigger className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm">
                              <SelectValue placeholder="Select event type" />
                            </SelectTrigger>
                            <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                              <SelectItem value="holiday" className="rounded-lg focus:bg-blue-50">🏖️ Holiday</SelectItem>
                              <SelectItem value="exam" className="rounded-lg focus:bg-blue-50">📝 Exam</SelectItem>
                              <SelectItem value="meeting" className="rounded-lg focus:bg-blue-50">🤝 Meeting</SelectItem>
                              <SelectItem value="event" className="rounded-lg focus:bg-blue-50">🎉 Event</SelectItem>
                              <SelectItem value="deadline" className="rounded-lg focus:bg-blue-50">⏰ Deadline</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="mt-4">
                        <Label htmlFor="description" className="text-slate-700 font-medium">Description</Label>
                        <Textarea
                          id="description"
                          value={eventForm.description}
                          onChange={(e) => setEventForm(prev => ({ ...prev, description: e.target.value }))}
                          className="mt-2 bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm min-h-[100px]"
                          placeholder="Describe the event..."
                          rows={3}
                        />
                      </div>
                    </div>

                    {/* Schedule & Settings Section */}
                    <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50 shadow-premium">
                      <h3 className="text-lg font-semibold text-slate-800 mb-4 flex items-center gap-2">
                        <div className="bg-green-100 rounded-lg p-2">
                          <Clock className="h-5 w-5 text-green-600" />
                        </div>
                        Schedule & Settings
                      </h3>

                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="start_date" className="text-slate-700 font-medium">Start Date</Label>
                          <Input
                            id="start_date"
                            type="datetime-local"
                            value={eventForm.start_date}
                            onChange={(e) => setEventForm(prev => ({ ...prev, start_date: e.target.value }))}
                            className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm"
                            required
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="end_date" className="text-slate-700 font-medium">End Date (Optional)</Label>
                          <Input
                            id="end_date"
                            type="datetime-local"
                            value={eventForm.end_date}
                            onChange={(e) => setEventForm(prev => ({ ...prev, end_date: e.target.value }))}
                            className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm"
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="color" className="text-slate-700 font-medium">Color</Label>
                          <Input
                            id="color"
                            type="color"
                            value={eventForm.color}
                            onChange={(e) => setEventForm(prev => ({ ...prev, color: e.target.value }))}
                            className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm h-12"
                          />
                        </div>
                      </div>

                      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="term_id" className="text-slate-700 font-medium">Term (Optional)</Label>
                          <Select
                            value={eventForm.term_id}
                            onValueChange={(value) => setEventForm(prev => ({ ...prev, term_id: value }))}
                          >
                            <SelectTrigger className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm">
                              <SelectValue placeholder="Select term" />
                            </SelectTrigger>
                            <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                              {terms.map((term) => (
                                <SelectItem key={term.id} value={term.id} className="rounded-lg focus:bg-blue-50">
                                  {term.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="flex items-center space-x-6 mt-6">
                        <div className="flex items-center space-x-3 bg-white/60 backdrop-blur-sm rounded-xl p-3 border border-white/50">
                          <Switch
                            id="is_all_day"
                            checked={eventForm.is_all_day}
                            onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_all_day: checked }))}
                            className="data-[state=checked]:bg-blue-600"
                          />
                          <Label htmlFor="is_all_day" className="text-slate-700 font-medium cursor-pointer">All Day</Label>
                        </div>
                        <div className="flex items-center space-x-3 bg-white/60 backdrop-blur-sm rounded-xl p-3 border border-white/50">
                          <Switch
                            id="is_recurring"
                            checked={eventForm.is_recurring}
                            onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_recurring: checked }))}
                            className="data-[state=checked]:bg-blue-600"
                          />
                          <Label htmlFor="is_recurring" className="text-slate-700 font-medium cursor-pointer">Recurring</Label>
                        </div>
                        <div className="flex items-center space-x-3 bg-white/60 backdrop-blur-sm rounded-xl p-3 border border-white/50">
                          <Switch
                            id="is_public"
                            checked={eventForm.is_public}
                            onCheckedChange={(checked) => setEventForm(prev => ({ ...prev, is_public: checked }))}
                            className="data-[state=checked]:bg-blue-600"
                          />
                          <Label htmlFor="is_public" className="text-slate-700 font-medium cursor-pointer">Public</Label>
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-end space-x-3 pt-4">
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => setIsEventDialogOpen(false)}
                        className="bg-white/80 border-slate-300 text-slate-700 hover:bg-slate-50 rounded-xl shadow-sm px-6"
                      >
                        Cancel
                      </Button>
                      <Button
                        type="submit"
                        disabled={createEventMutation.isPending}
                        className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl shadow-premium px-6"
                      >
                        {createEventMutation.isPending ? 'Creating...' : 'Create Event'}
                      </Button>
                    </div>
                  </form>
                </div>
              </DialogContent>
            </Dialog>
          </div>

          {/* Wave Bottom */}
          <div className="absolute bottom-0 left-0 right-0">
            <svg className="w-full h-20 fill-current text-slate-50" viewBox="0 0 1440 120">
              <path d="M0,60 C240,120 480,0 720,60 C960,120 1200,0 1440,60 L1440,120 L0,120 Z" />
            </svg>
          </div>
        </div>

        {/* Main Content */}
        <div className="relative z-10 -mt-10 space-y-8 px-6 pb-16">
          {/* Premium Navigation Tabs */}
          <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg">
            <div className="p-6">
              <div className="flex flex-wrap items-center justify-between gap-4">
                <div className="flex items-center space-x-2">
                  <Button
                    variant={viewMode === 'calendar' ? 'default' : 'outline'}
                    onClick={() => setViewMode('calendar')}
                    className={`${viewMode === 'calendar'
                      ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-premium'
                      : 'bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50'
                    } rounded-xl transition-all duration-200`}
                  >
                    <CalendarIcon className="h-4 w-4 mr-2" />
                    Calendar View
                  </Button>
                  <Button
                    variant={viewMode === 'events' ? 'default' : 'outline'}
                    onClick={() => setViewMode('events')}
                    className={`${viewMode === 'events'
                      ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-premium'
                      : 'bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50'
                    } rounded-xl transition-all duration-200`}
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    All Events
                  </Button>
                  <Button
                    variant={viewMode === 'upcoming' ? 'default' : 'outline'}
                    onClick={() => setViewMode('upcoming')}
                    className={`${viewMode === 'upcoming'
                      ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-premium'
                      : 'bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50'
                    } rounded-xl transition-all duration-200`}
                  >
                    <AlertCircle className="h-4 w-4 mr-2" />
                    Upcoming
                  </Button>
                  <Button
                    variant={viewMode === 'stats' ? 'default' : 'outline'}
                    onClick={() => setViewMode('stats')}
                    className={`${viewMode === 'stats'
                      ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-premium'
                      : 'bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50'
                    } rounded-xl transition-all duration-200`}
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    Statistics
                  </Button>
                </div>

                {/* Export Dropdown */}
                <Select onValueChange={(format) => exportCalendarMutation.mutate(format)}>
                  <SelectTrigger className="w-48 bg-white/60 border-blue-200 rounded-xl focus:border-blue-400 focus:ring-blue-400/20">
                    <Download className="h-4 w-4 mr-2" />
                    <SelectValue placeholder="Export Calendar" />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                    <SelectItem value="ical" className="rounded-lg focus:bg-blue-50">📅 iCal (.ics)</SelectItem>
                    <SelectItem value="google" className="rounded-lg focus:bg-blue-50">🗓️ Google Calendar</SelectItem>
                    <SelectItem value="outlook" className="rounded-lg focus:bg-blue-50">📋 Outlook (.csv)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {/* Premium Filters */}
          <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
            <div className="p-6">
              <h3 className="text-lg font-semibold text-slate-800 mb-4 flex items-center gap-2">
                <div className="bg-orange-100 rounded-lg p-2">
                  <Filter className="h-5 w-5 text-orange-600" />
                </div>
                Calendar Filters
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label className="text-slate-700 font-medium">Event Type</Label>
                  <Select value={eventTypeFilter} onValueChange={setEventTypeFilter}>
                    <SelectTrigger className="bg-white/80 border-blue-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl shadow-sm">
                      <SelectValue placeholder="All Events" />
                    </SelectTrigger>
                    <SelectContent className="bg-white/95 backdrop-blur-md border-blue-200/60 rounded-xl shadow-premium">
                      <SelectItem value="all" className="rounded-lg focus:bg-blue-50">📅 All Events</SelectItem>
                      <SelectItem value="exam" className="rounded-lg focus:bg-blue-50">📝 Exams</SelectItem>
                      <SelectItem value="payment_due" className="rounded-lg focus:bg-blue-50">💰 Payment Due</SelectItem>
                      <SelectItem value="deadline" className="rounded-lg focus:bg-blue-50">⏰ Deadlines</SelectItem>
                      <SelectItem value="holiday" className="rounded-lg focus:bg-blue-50">🏖️ Holidays</SelectItem>
                      <SelectItem value="meeting" className="rounded-lg focus:bg-blue-50">🤝 Meetings</SelectItem>
                      <SelectItem value="event" className="rounded-lg focus:bg-blue-50">🎉 General Events</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex items-end">
                  <div className="flex items-center space-x-3 bg-white/60 backdrop-blur-sm rounded-xl p-3 border border-white/50">
                    <Switch
                      checked={includeAutoGenerated}
                      onCheckedChange={setIncludeAutoGenerated}
                      id="auto-generated"
                      className="data-[state=checked]:bg-blue-600"
                    />
                    <Label htmlFor="auto-generated" className="text-slate-700 font-medium cursor-pointer">
                      Include Auto-Generated Events
                    </Label>
                  </div>
                </div>

                {currentAcademicYear && (
                  <div className="space-y-2">
                    <Label className="text-slate-700 font-medium">Academic Year</Label>
                    <div className="bg-white/60 backdrop-blur-sm rounded-xl p-3 border border-white/50">
                      <p className="font-semibold text-slate-800">{currentAcademicYear.name}</p>
                      <p className="text-sm text-slate-600">
                        {format(new Date(currentAcademicYear.start_date), 'MMM dd')} - {format(new Date(currentAcademicYear.end_date), 'MMM dd, yyyy')}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Premium Calendar View */}
          {viewMode === 'calendar' && (
            <div className="grid gap-6 lg:grid-cols-4">
              <div className="lg:col-span-3">
                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg">
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                        {format(selectedDate, 'MMMM yyyy')}
                      </h3>
                      <div className="flex items-center space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1, 1))}
                          className="bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl"
                        >
                          ←
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedDate(new Date())}
                          className="bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl"
                        >
                          Today
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1))}
                          className="bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl"
                        >
                          →
                        </Button>
                      </div>
                    </div>

                    <div className="grid grid-cols-7 gap-1 mb-4">
                      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                        <div key={day} className="p-3 text-center font-semibold text-sm text-slate-600 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg">
                          {day}
                        </div>
                      ))}
                    </div>

                    <div className="grid grid-cols-7 gap-2">
                      {calendarDays.map(({ date, events, isToday, isSelected }) => (
                        <div
                          key={date.toISOString()}
                          className={`p-3 min-h-[100px] border-2 rounded-xl cursor-pointer transition-all duration-200 hover:shadow-premium ${
                            isToday ? 'bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-300 shadow-premium' : 'bg-white/60 border-white/50'
                          } ${
                            isSelected ? 'bg-gradient-to-br from-blue-100 to-indigo-100 border-blue-400 shadow-premium-lg' : ''
                          } hover:bg-gradient-to-br hover:from-slate-50 hover:to-blue-50`}
                          onClick={() => setSelectedDate(date)}
                        >
                          <div className={`font-bold text-sm mb-2 ${
                            isToday ? 'text-blue-700' : isSelected ? 'text-indigo-700' : 'text-slate-700'
                          }`}>
                            {format(date, 'd')}
                          </div>
                          <div className="space-y-1">
                            {events.slice(0, 2).map((event, index) => (
                              <StatusBadge
                                key={event.id}
                                variant={getEventStatusVariant(event.event_type)}
                                size="sm"
                                className="text-xs truncate cursor-pointer rounded-lg shadow-sm"
                                title={event.title}
                              >
                                {getEventTypeIcon(event.event_type)} {event.title}
                              </StatusBadge>
                            ))}
                            {events.length > 2 && (
                              <div className="text-xs text-slate-500 font-medium bg-slate-100 rounded-md px-2 py-1">
                                +{events.length - 2} more
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                  <div className="p-6">
                    <h3 className="text-xl font-bold text-slate-800 mb-4">
                      {format(selectedDate, 'MMMM dd, yyyy')}
                    </h3>

                    {getEventsForDate(selectedDate).length > 0 ? (
                      <div className="space-y-3">
                        {getEventsForDate(selectedDate).map((event) => (
                          <div key={event.id} className="bg-white/60 backdrop-blur-sm rounded-xl p-4 border border-white/50 shadow-sm hover:shadow-premium transition-all duration-200">
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-2">
                                  <StatusBadge variant={getEventStatusVariant(event.event_type)} size="sm" className="rounded-lg">
                                    {event.event_type}
                                  </StatusBadge>
                                  {event.auto_generated && (
                                    <Badge variant="outline" className="text-xs rounded-lg">Auto</Badge>
                                  )}
                                </div>
                                <div className="font-semibold text-slate-800">{event.title}</div>
                                {event.description && (
                                  <div className="text-sm mt-1 text-slate-600">{event.description}</div>
                                )}
                                <div className="flex items-center mt-2 text-xs text-slate-500">
                                  <Clock className="h-3 w-3 mr-1" />
                                  {event.is_all_day ? 'All day' : format(new Date(event.start_date), 'HH:mm')}
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-slate-500">
                        <CalendarIcon className="h-12 w-12 mx-auto mb-3 opacity-50" />
                        <p>No events on this date</p>
                      </div>
                    )}
                  </div>
                </div>

                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                  <div className="p-6">
                    <h3 className="text-xl font-bold text-slate-800 mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      <Button
                        variant="outline"
                        className="w-full justify-start bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl shadow-sm transition-all duration-200"
                        onClick={() => setIsEventDialogOpen(true)}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Add Event
                      </Button>
                      <Button
                        variant="outline"
                        className="w-full justify-start bg-white/60 border-green-200 text-green-700 hover:bg-green-50 rounded-xl shadow-sm transition-all duration-200"
                        onClick={() => setViewMode('events')}
                      >
                        <BookOpen className="h-4 w-4 mr-2" />
                        View All Events
                      </Button>
                      <Button
                        variant="outline"
                        className="w-full justify-start bg-white/60 border-orange-200 text-orange-700 hover:bg-orange-50 rounded-xl shadow-sm transition-all duration-200"
                        onClick={() => setViewMode('upcoming')}
                      >
                        <AlertCircle className="h-4 w-4 mr-2" />
                        Upcoming Deadlines
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Upcoming Events Quick Navigation */}
                {upcomingEvents.length > 0 && (
                  <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                    <div className="p-6">
                      <h3 className="text-xl font-bold text-slate-800 mb-4">Upcoming Events</h3>
                      <div className="space-y-3">
                        {upcomingEvents.map((event: any) => {
                          const eventDate = new Date(event.start_date);
                          const daysUntil = event.days_until || 0;
                          return (
                            <Button
                              key={event.id}
                              variant="outline"
                              className="w-full justify-start text-left bg-white/60 border-blue-200 hover:bg-blue-50 rounded-xl shadow-sm transition-all duration-200 p-4 h-auto"
                              onClick={() => setSelectedDate(eventDate)}
                            >
                              <div className="flex items-center w-full">
                                <CalendarIcon className="h-4 w-4 mr-3 flex-shrink-0 text-blue-600" />
                                <div className="truncate flex-1">
                                  <div className="text-sm font-semibold truncate text-slate-800">{event.title}</div>
                                  <div className="text-xs text-slate-600 flex items-center gap-2 mt-1">
                                    <StatusBadge variant={getEventStatusVariant(event.event_type)} size="sm" className="text-xs rounded-lg">
                                      {event.event_type}
                                    </StatusBadge>
                                    <span className="font-medium">
                                      {daysUntil === 0 ? 'Today' : daysUntil === 1 ? 'Tomorrow' : `${daysUntil} days`}
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </Button>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Premium Events List View */}
          {viewMode === 'events' && (
            <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg">
                <div className="p-6">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-6">All Events</h3>

                  {eventsLoading ? (
                    <ContentLoading message="Loading events..." />
                  ) : eventsError ? (
                    <ErrorDisplay
                      variant="inline"
                      title="Failed to load events"
                      error={eventsError}
                      onRetry={() => queryClient.invalidateQueries({ queryKey: ['enhanced-calendar-events'] })}
                    />
                  ) : (
                    <div className="space-y-4">
                      {allEvents.map((event) => (
                        <div key={event.id} className="bg-white/60 backdrop-blur-sm rounded-xl p-6 border border-white/50 shadow-premium hover:shadow-premium-lg transition-all duration-200">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-3">
                                <span className="text-2xl">{getEventTypeIcon(event.event_type)}</span>
                                <h3 className="font-bold text-slate-800 text-lg">{event.title}</h3>
                                <StatusBadge variant={getEventStatusVariant(event.event_type)} size="sm" className="rounded-lg">
                                  {event.event_type}
                                </StatusBadge>
                                {event.auto_generated && (
                                  <Badge variant="outline" className="text-xs rounded-lg">Auto-Generated</Badge>
                                )}
                              </div>
                              {event.description && (
                                <p className="text-sm mt-2 text-slate-600 bg-slate-50 rounded-lg p-3">{event.description}</p>
                              )}
                              <div className="flex items-center gap-6 mt-4 text-sm">
                                <div className="flex items-center bg-blue-50 rounded-lg px-3 py-2">
                                  <CalendarIcon className="h-4 w-4 mr-2 text-blue-600" />
                                  <span className="font-medium text-blue-700">{format(new Date(event.start_date), 'MMM dd, yyyy')}</span>
                                </div>
                                {!event.is_all_day && (
                                  <div className="flex items-center bg-green-50 rounded-lg px-3 py-2">
                                    <Clock className="h-4 w-4 mr-2 text-green-600" />
                                    <span className="font-medium text-green-700">{format(new Date(event.start_date), 'HH:mm')}</span>
                                  </div>
                                )}
                                <div className="flex items-center bg-purple-50 rounded-lg px-3 py-2">
                                  <Users className="h-4 w-4 mr-2 text-purple-600" />
                                  <span className="font-medium text-purple-700">{event.target_audience || 'All'}</span>
                                </div>
                              </div>
                              {event.metadata && Object.keys(event.metadata).length > 0 && (
                                <div className="mt-3 text-xs text-slate-600">
                                  <details className="bg-slate-50 rounded-lg p-3">
                                    <summary className="cursor-pointer hover:text-slate-800 font-medium">Additional Details</summary>
                                    <div className="mt-2 space-y-1">
                                      {Object.entries(event.metadata).map(([key, value]) => (
                                        <div key={key} className="flex justify-between">
                                          <span className="font-medium">{key}:</span>
                                          <span>{String(value)}</span>
                                        </div>
                                      ))}
                                    </div>
                                  </details>
                                </div>
                              )}
                            </div>
                            {!event.auto_generated && canDelete && (
                              <div className="flex items-center space-x-2">
                                <Button variant="outline" size="sm" className="bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl">
                                  <Edit className="h-4 w-4" />
                                </Button>
                                <Button variant="outline" size="sm" className="bg-white/60 border-red-200 text-red-700 hover:bg-red-50 rounded-xl">
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}

          {/* Premium Upcoming Events View */}
          {viewMode === 'upcoming' && (
            <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium-lg">
                <div className="p-6">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-6">Upcoming Events (Next 14 Days)</h3>

                  {upcomingEvents.length > 0 ? (
                    <div className="space-y-4">
                      {upcomingEvents.map((event) => {
                        const daysUntil = event.days_until || 0;
                        const isOverdue = event.is_overdue || false;

                        return (
                          <div key={event.id} className={`bg-white/60 backdrop-blur-sm rounded-xl p-6 border shadow-premium hover:shadow-premium-lg transition-all duration-200 ${isOverdue ? 'border-red-300 bg-red-50/50' : daysUntil === 0 ? 'border-yellow-300 bg-yellow-50/50' : daysUntil === 1 ? 'border-blue-300 bg-blue-50/50' : 'border-white/50'}`}>
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="flex items-center gap-3 mb-2">
                                  <span className="text-xl">{getEventTypeIcon(event.event_type)}</span>
                                  <StatusBadge
                                    variant={isOverdue ? 'error' : daysUntil === 0 ? 'warning' : getEventStatusVariant(event.event_type)}
                                    size="sm"
                                    className="rounded-lg"
                                  >
                                    {event.event_type}
                                  </StatusBadge>
                                  {event.auto_generated && (
                                    <Badge variant="outline" className="text-xs rounded-lg">Auto</Badge>
                                  )}
                                </div>
                                <h3 className="font-bold text-slate-800 text-lg">{event.title}</h3>
                                {event.description && (
                                  <p className="text-sm text-slate-600 mt-2 bg-slate-50 rounded-lg p-3">{event.description}</p>
                                )}
                                <div className="flex items-center gap-4 mt-4 text-sm">
                                  <div className="flex items-center bg-blue-50 rounded-lg px-3 py-2">
                                    <CalendarIcon className="h-4 w-4 mr-2 text-blue-600" />
                                    <span className="font-medium text-blue-700">{format(new Date(event.start_date), 'MMM dd, yyyy')}</span>
                                  </div>
                                  <div className={`font-bold px-4 py-2 rounded-lg ${isOverdue ? 'text-red-700 bg-red-100' : daysUntil === 0 ? 'text-yellow-700 bg-yellow-100' : daysUntil === 1 ? 'text-blue-700 bg-blue-100' : 'text-slate-700 bg-slate-100'}`}>
                                    {isOverdue ? '🚨 Overdue' :
                                     daysUntil === 0 ? '⚡ Today' :
                                     daysUntil === 1 ? '🔔 Tomorrow' :
                                     `📅 ${daysUntil} days`}
                                  </div>
                                </div>
                              </div>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setSelectedDate(new Date(event.start_date));
                                  setViewMode('calendar');
                                }}
                                className="bg-white/60 border-blue-200 text-blue-700 hover:bg-blue-50 rounded-xl shadow-sm"
                              >
                                View in Calendar
                              </Button>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  ) : (
                    <div className="text-center py-12 text-slate-500">
                      <CalendarIcon className="h-16 w-16 mx-auto mb-4 opacity-50" />
                      <p className="text-lg font-medium">No upcoming events in the next 14 days</p>
                      <p className="text-sm mt-2">Your calendar is clear! 🎉</p>
                    </div>
                  )}
                </div>
              </div>
            )}

          {/* Premium Statistics View */}
          {viewMode === 'stats' && calendarStats && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                  <div className="p-6">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="bg-blue-100 rounded-lg p-3">
                        <CalendarIcon className="h-6 w-6 text-blue-600" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-slate-800">Upcoming Events</h3>
                        <p className="text-sm text-slate-600">Next 7 Days</p>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-blue-600">{calendarStats.upcoming_events_week}</div>
                    <div className="text-sm text-slate-600 mt-2">Events scheduled soon</div>
                  </div>
                </div>

                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                  <div className="p-6">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="bg-red-100 rounded-lg p-3">
                        <AlertCircle className="h-6 w-6 text-red-600" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-slate-800">Overdue Events</h3>
                        <p className="text-sm text-slate-600">Needs Attention</p>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-red-600">{calendarStats.overdue_events}</div>
                    <div className="text-sm text-slate-600 mt-2">Past due events</div>
                  </div>
                </div>

                <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                  <div className="p-6">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="bg-green-100 rounded-lg p-3">
                        <CheckCircle className="h-6 w-6 text-green-600" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-slate-800">Auto-Generated</h3>
                        <p className="text-sm text-slate-600">System Events</p>
                      </div>
                    </div>
                    <div className="text-3xl font-bold text-green-600">{calendarStats.event_sources?.auto_generated || 0}</div>
                    <div className="text-sm text-slate-600 mt-2">vs {calendarStats.event_sources?.manual || 0} manual</div>
                  </div>
                </div>
              </div>

              <div className="bg-white/80 backdrop-blur-glass rounded-2xl border border-white/20 shadow-premium">
                <div className="p-6">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-6">Events by Type (This Month)</h3>

                  {calendarStats.current_month?.event_types?.length > 0 ? (
                    <div className="space-y-4">
                      {calendarStats.current_month.event_types.map((eventType: any) => (
                        <div key={eventType.type} className="flex items-center justify-between bg-white/60 backdrop-blur-sm rounded-xl p-4 border border-white/50 shadow-sm">
                          <div className="flex items-center gap-3">
                            <span className="text-xl">{getEventTypeIcon(eventType.type)}</span>
                            <StatusBadge variant={getEventStatusVariant(eventType.type)} size="sm" className="rounded-lg">
                              {eventType.type}
                            </StatusBadge>
                          </div>
                          <div className="text-2xl font-bold text-slate-800">{eventType.count}</div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-12 text-slate-500">
                      <CalendarIcon className="h-16 w-16 mx-auto mb-4 opacity-50" />
                      <p className="text-lg font-medium">No events this month</p>
                      <p className="text-sm mt-2">Start planning your academic calendar! 📅</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AcademicCalendar;