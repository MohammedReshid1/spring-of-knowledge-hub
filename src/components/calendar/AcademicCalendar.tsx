import { useState, useMemo } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Switch } from '@/components/ui/switch';
import { toast } from '@/hooks/use-toast';
import { StatusBadge } from '@/components/ui/status-badge';
import { ErrorDisplay } from '@/components/ui/error-boundary';
import { ContentLoading } from '@/components/ui/loading';
import {
  Plus, Calendar as CalendarIcon, Clock, MapPin, Users,
  BookOpen, AlertCircle, CheckCircle, X, Edit, Trash2, Filter, ChevronLeft, ChevronRight
} from 'lucide-react';
import { format, isSameDay, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';
import { useRoleAccess } from '@/hooks/useRoleAccess';
import { useBranch } from '@/contexts/BranchContext';

interface AcademicEvent {
  id: string;
  title: string;
  description?: string;
  event_type: string;
  start_date: string;
  end_date?: string;
  is_all_day: boolean;
  academic_year_id: string;
  term_id?: string;
  color?: string;
  is_recurring: boolean;
  is_public: boolean;
  created_at: string;
}

interface Holiday {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  holiday_type: string;
  description?: string;
  academic_year_id: string;
  is_recurring: boolean;
}

interface AcademicYear {
  id: string;
  name: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

interface Term {
  id: string;
  name: string;
  academic_year_id: string;
  start_date: string;
  end_date: string;
  is_current: boolean;
}

export const AcademicCalendar = () => {
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [viewMode, setViewMode] = useState<'calendar' | 'events' | 'upcoming' | 'stats'>('calendar');
  const [isEventDialogOpen, setIsEventDialogOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<AcademicEvent | null>(null);
  const [eventTypeFilter, setEventTypeFilter] = useState<string>('all');
  const [includeAutoGenerated, setIncludeAutoGenerated] = useState(true);

  // Form state for event creation
  const [eventForm, setEventForm] = useState({
    title: '',
    description: '',
    event_type: '',
    start_date: '',
    end_date: '',
    is_all_day: true,
    term_id: '',
    color: '#3498db',
    is_recurring: false,
    is_public: true,
  });

  const queryClient = useQueryClient();
  const { currentUser, canDelete } = useRoleAccess();
  const { selectedBranch } = useBranch();

  // Get current month range for events
  const monthStart = startOfMonth(selectedDate);
  const monthEnd = endOfMonth(selectedDate);

  // Fetch academic years
  const { data: academicYears = [] } = useQuery({
    queryKey: ['academic-years'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch current academic year
  const { data: currentAcademicYear } = useQuery({
    queryKey: ['current-academic-year'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/academic-calendar/academic-years/current');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Fetch terms for current academic year
  const { data: terms = [] } = useQuery({
    queryKey: ['terms', currentAcademicYear?.id],
    queryFn: async () => {
      if (!currentAcademicYear?.id) return [];
      const { data, error } = await apiClient.request(`/academic-calendar/terms?academic_year_id=${currentAcademicYear.id}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch events using enhanced calendar API
  const { data: events = [], isLoading: eventsLoading, error: eventsError } = useQuery({
    queryKey: ['enhanced-calendar-events', monthStart.toISOString(), monthEnd.toISOString(), eventTypeFilter, includeAutoGenerated, selectedBranch],
    queryFn: async () => {
      const params = new URLSearchParams({
        start_date: monthStart.toISOString().split('T')[0],
        end_date: monthEnd.toISOString().split('T')[0],
        include_auto_generated: includeAutoGenerated.toString()
      });
      
      if (eventTypeFilter !== 'all') {
        params.append('event_types', eventTypeFilter);
      }
      
      // Add branch filtering
      if (selectedBranch && selectedBranch !== 'all') {
        params.append('branch_id', selectedBranch);
      }
      
      const { data, error } = await apiClient.request(`/calendar/events?${params.toString()}`);
      if (error) throw new Error(error);
      return data || [];
    },
    enabled: !!currentAcademicYear
  });

  // Fetch classes for mapping
  const { data: classes = [] } = useQuery({
    queryKey: ['classes'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/classes');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch subjects for mapping
  const { data: subjects = [] } = useQuery({
    queryKey: ['subjects'],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/subjects');
      if (error) throw new Error(error);
      return data || [];
    }
  });

  // Fetch upcoming events for quick view
  const { data: upcomingEvents = [] } = useQuery({
    queryKey: ['upcoming-events', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/upcoming-events?days_ahead=14&limit=5');
      if (error) throw new Error(error);
      return data?.events || [];
    },
    refetchInterval: 5 * 60 * 1000 // Refetch every 5 minutes
  });
  
  // Fetch calendar stats
  const { data: calendarStats } = useQuery({
    queryKey: ['calendar-stats', selectedBranch],
    queryFn: async () => {
      const { data, error } = await apiClient.request('/calendar/stats');
      if (error) throw new Error(error);
      return data;
    }
  });

  // Create event mutation
  const createEventMutation = useMutation({
    mutationFn: async (eventData: any) => {
      console.log('Mutation function called with:', eventData);
      console.log('JSON stringified:', JSON.stringify(eventData));
      const { data, error } = await apiClient.request('/academic-calendar/events', {
        method: 'POST',
        body: JSON.stringify(eventData)
      });
      if (error) throw new Error(error);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['enhanced-calendar-events'] });
      queryClient.invalidateQueries({ queryKey: ['upcoming-events'] });
      queryClient.invalidateQueries({ queryKey: ['calendar-stats'] });
      setIsEventDialogOpen(false);
      resetForm();
      
      toast({
        title: "Success",
        description: "Event created successfully",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create event",
        variant: "destructive",
      });
    }
  });


  const handleCreateEvent = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentAcademicYear?.id) {
      toast({
        title: "Error",
        description: "No current academic year found",
        variant: "destructive",
      });
      return;
    }

    // Validate required fields
    if (!eventForm.title.trim()) {
      toast({
        title: "Error",
        description: "Event title is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.event_type) {
      toast({
        title: "Error",
        description: "Event type is required",
        variant: "destructive",
      });
      return;
    }

    if (!eventForm.start_date) {
      toast({
        title: "Error",
        description: "Start date is required",
        variant: "destructive",
      });
      return;
    }

    const eventData = {
      title: eventForm.title.trim(),
      description: eventForm.description?.trim() || undefined,
      event_type: eventForm.event_type,
      start_date: new Date(eventForm.start_date).toISOString(),
      end_date: eventForm.end_date ? new Date(eventForm.end_date).toISOString() : undefined,
      is_all_day: eventForm.is_all_day,
      academic_year_id: currentAcademicYear.id,
      term_id: eventForm.term_id || undefined,
      color: eventForm.color,
      is_recurring: eventForm.is_recurring,
      is_public: eventForm.is_public,
    };

    console.log('Event data being sent:', eventData);
    createEventMutation.mutate(eventData);
  };

  const resetForm = () => {
    const defaultStartDate = format(selectedDate, "yyyy-MM-dd'T'HH:mm");
    console.log('Resetting form with start_date:', defaultStartDate);
    setEventForm({
      title: '',
      description: '',
      event_type: '',
      start_date: defaultStartDate,
      end_date: '',
      is_all_day: true,
      term_id: '',
      color: '#3498db',
      is_recurring: false,
      is_public: true,
    });
  };

  // Events are already combined from the enhanced API
  const allEvents = events;

  // Get events for a specific date
  const getEventsForDate = (date: Date) => {
    const filtered = allEvents.filter(event => {
      const eventStart = new Date(event.start_date);
      const eventEnd = event.end_date ? new Date(event.end_date) : eventStart;
      
      // Use isSameDay from date-fns for more reliable date comparison
      return isSameDay(date, eventStart) || (eventEnd && date >= eventStart && date <= eventEnd);
    });
    
    
    return filtered;
  };

  // Generate calendar days with events
  const calendarDays = useMemo(() => {
    const days = eachDayOfInterval({ start: monthStart, end: monthEnd });
    return days.map(day => ({
      date: day,
      events: getEventsForDate(day),
      isToday: isSameDay(day, new Date()),
      isSelected: isSameDay(day, selectedDate)
    }));
  }, [monthStart, monthEnd, allEvents, selectedDate]);

  const getEventStatusVariant = (eventType: string) => {
    const variants = {
      'holiday': 'error' as const,
      'exam': 'warning' as const,
      'meeting': 'info' as const,
      'event': 'success' as const,
      'deadline': 'error' as const,
      'payment_due': 'warning' as const,
      'report_due': 'info' as const
    };
    return variants[eventType as keyof typeof variants] || 'neutral' as const;
  };

  const getEventTypeIcon = (eventType: string) => {
    const icons = {
      'holiday': '🏖️',
      'exam': '📝',
      'meeting': '🤝',
      'event': '🎉',
      'deadline': '⏰'
    };
    return icons[eventType as keyof typeof icons] || '📅';
  };

  return (
    <>
      {/* Premium Animation Styles */}
      <style jsx global>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(30px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }

        @keyframes pulseGlow {
          0%, 100% {
            box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
          }
          50% {
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
          }
        }

        .animate-fadeInUp {
          animation: fadeInUp 0.6s ease-out;
        }

        .animate-slideInRight {
          animation: slideInRight 0.6s ease-out;
        }

        .animate-pulseGlow {
          animation: pulseGlow 2s infinite;
        }
      `}</style>

      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20">
        {/* Premium Header Section */}
        <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-800 pb-20 pt-8">
          {/* Background Pattern */}
          <div className="absolute inset-0 opacity-10">
            <div className="absolute inset-0" style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
            }} />
          </div>

          {/* Floating Shapes */}
          <div className="absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full animate-pulse" />
          <div className="absolute top-20 right-20 w-16 h-16 bg-white/10 rounded-full animate-pulse delay-1000" />
          <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-white/10 rounded-full animate-pulse delay-500" />

          <div className="relative z-10 px-6">
            <div className="flex justify-between items-start mb-8">
              <div className="animate-fadeInUp">
                <div className="flex items-center gap-3 mb-4">
                  <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3">
                    <CalendarIcon className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <h1 className="text-4xl font-bold text-white mb-2">Academic Calendar</h1>
                    <p className="text-blue-100 text-lg">
                      {currentAcademicYear?.name || 'Academic Year'} - Plan, track, and manage all academic events
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex gap-3 animate-slideInRight">
                <Dialog open={isEventDialogOpen} onOpenChange={setIsEventDialogOpen}>
                  <DialogTrigger asChild>
                    <Button
                      className="bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-sm animate-pulseGlow"
                      onClick={resetForm}
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Add Event
                    </Button>
                  </DialogTrigger>
                </Dialog>

              </div>
            </div>

            {/* Premium View Mode Tabs */}
            <div className="animate-fadeInUp" style={{ animationDelay: '0.2s' }}>
              <div className="bg-white/20 backdrop-blur-glass rounded-2xl p-2 inline-flex space-x-2">
                {['calendar', 'events', 'upcoming', 'stats'].map((mode) => (
                  <button
                    key={mode}
                    onClick={() => setViewMode(mode as any)}
                    className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                      viewMode === mode
                        ? 'bg-white text-blue-700 shadow-lg'
                        : 'text-white hover:bg-white/10'
                    }`}
                  >
                    {mode.charAt(0).toUpperCase() + mode.slice(1)}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Wave Bottom */}
          <div className="absolute bottom-0 left-0 right-0">
            <svg className="w-full h-20 fill-current text-slate-50" viewBox="0 0 1440 120">
              <path d="M0,60 C240,120 480,0 720,60 C960,120 1200,0 1440,60 L1440,120 L0,120 Z" />
            </svg>
          </div>
        </div>

        {/* Main Content */}
        <div className="relative z-10 -mt-10 space-y-8 px-6 pb-16">

          {/* Calendar View */}
          {viewMode === 'calendar' && (
            <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-xl animate-fadeInUp">
              <div className="p-8">
                {/* Calendar Header */}
                <div className="flex items-center justify-between mb-8">
                  <div className="flex items-center gap-4">
                    <div className="bg-gradient-to-br from-blue-500/20 to-indigo-500/20 rounded-xl p-3">
                      <CalendarIcon className="h-6 w-6 text-blue-600" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                        {format(selectedDate, 'MMMM yyyy')}
                      </h2>
                      <p className="text-gray-600">Interactive calendar view</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1, 1))}
                      className="bg-white/80 border-blue-200 text-blue-700 hover:bg-blue-50"
                    >
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedDate(new Date())}
                      className="bg-white/80 border-blue-200 text-blue-700 hover:bg-blue-50"
                    >
                      Today
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 1))}
                      className="bg-white/80 border-blue-200 text-blue-700 hover:bg-blue-50"
                    >
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                {/* Calendar Grid */}
                <div className="space-y-4">
                  {/* Days of Week Header */}
                  <div className="grid grid-cols-7 gap-2">
                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                      <div key={day} className="p-3 text-center font-semibold text-gray-700 bg-blue-50/50 rounded-lg">
                        {day}
                      </div>
                    ))}
                  </div>

                  {/* Calendar Days */}
                  <div className="grid grid-cols-7 gap-2">
                    {calendarDays.map((day, index) => (
                      <div
                        key={day.date.toISOString()}
                        onClick={() => setSelectedDate(day.date)}
                        className={`min-h-[100px] p-3 rounded-xl border cursor-pointer transition-all duration-200 ${
                          day.isToday
                            ? 'bg-gradient-to-br from-blue-500/10 to-indigo-500/10 border-blue-300 ring-2 ring-blue-200'
                            : day.isSelected
                            ? 'bg-gradient-to-br from-indigo-500/10 to-purple-500/10 border-indigo-300'
                            : 'bg-white/60 border-gray-200/60 hover:bg-blue-50/50 hover:border-blue-200'
                        }`}
                      >
                        <div className={`text-sm font-medium mb-2 ${
                          day.isToday ? 'text-blue-700' : 'text-gray-700'
                        }`}>
                          {format(day.date, 'd')}
                        </div>
                        <div className="space-y-1">
                          {day.events.slice(0, 2).map((event: any) => (
                            <div
                              key={event.id}
                              className="text-xs p-1 rounded-md bg-gradient-to-r from-blue-500/20 to-indigo-500/20 text-blue-700 border border-blue-200/50"
                              title={event.title}
                            >
                              {getEventTypeIcon(event.event_type)} {event.title.length > 15 ? event.title.substring(0, 15) + '...' : event.title}
                            </div>
                          ))}
                          {day.events.length > 2 && (
                            <div className="text-xs text-gray-500">
                              +{day.events.length - 2} more
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Events View */}
          {viewMode === 'events' && (
            <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-xl animate-fadeInUp">
              <div className="p-8">
                <div className="flex items-center gap-4 mb-8">
                  <div className="bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-xl p-3">
                    <BookOpen className="h-6 w-6 text-green-600" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                      All Events
                    </h2>
                    <p className="text-gray-600">Complete list of academic events</p>
                  </div>
                </div>

                {eventsLoading ? (
                  <div className="text-center py-16">
                    <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <p className="text-gray-500 mt-4">Loading events...</p>
                  </div>
                ) : events.length ? (
                  <div className="grid gap-4">
                    {events.map((event: any) => (
                      <div key={event.id} className="bg-gradient-to-r from-white/80 to-white/60 rounded-2xl p-6 border border-white/50 shadow-premium hover:shadow-premium-lg transition-all duration-300">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-4">
                            <div className="bg-gradient-to-br from-blue-500/10 to-indigo-500/10 rounded-xl p-3">
                              <span className="text-2xl">{getEventTypeIcon(event.event_type)}</span>
                            </div>
                            <div>
                              <h3 className="font-semibold text-gray-900 mb-1">{event.title}</h3>
                              <p className="text-gray-600 text-sm mb-2">{event.description}</p>
                              <div className="flex items-center gap-4 text-sm text-gray-500">
                                <div className="flex items-center gap-1">
                                  <Clock className="h-4 w-4" />
                                  {format(new Date(event.start_date), 'MMM dd, yyyy')}
                                </div>
                                <StatusBadge variant={getEventStatusVariant(event.event_type)}>
                                  {event.event_type}
                                </StatusBadge>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-16">
                    <CalendarIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <p className="text-gray-500 text-lg">No events found</p>
                    <p className="text-gray-400 text-sm">Try adjusting your filters or add a new event</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Upcoming Events View */}
          {viewMode === 'upcoming' && (
            <div className="bg-white/90 backdrop-blur-glass rounded-3xl border border-white/20 shadow-premium-xl animate-fadeInUp">
              <div className="p-8">
                <div className="flex items-center gap-4 mb-8">
                  <div className="bg-gradient-to-br from-orange-500/20 to-amber-500/20 rounded-xl p-3">
                    <Clock className="h-6 w-6 text-orange-600" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold bg-gradient-to-r from-orange-600 to-amber-600 bg-clip-text text-transparent">
                      Upcoming Events
                    </h2>
                    <p className="text-gray-600">Next 14 days of scheduled events</p>
                  </div>
                </div>

                {upcomingEvents.length ? (
                  <div className="space-y-4">
                    {upcomingEvents.map((event: any) => (
                      <div key={event.id} className="bg-gradient-to-r from-white/80 to-white/60 rounded-2xl p-6 border border-white/50 shadow-premium hover:shadow-premium-lg transition-all duration-300">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-4">
                            <div className="bg-gradient-to-br from-orange-500/10 to-amber-500/10 rounded-xl p-3">
                              <span className="text-2xl">{getEventTypeIcon(event.event_type)}</span>
                            </div>
                            <div>
                              <h3 className="font-semibold text-gray-900 mb-1">{event.title}</h3>
                              <div className="flex items-center gap-4 text-sm text-gray-500">
                                <div className="flex items-center gap-1">
                                  <Clock className="h-4 w-4" />
                                  {format(new Date(event.start_date), 'MMM dd, yyyy')}
                                </div>
                                <StatusBadge variant={getEventStatusVariant(event.event_type)}>
                                  {event.event_type}
                                </StatusBadge>
                              </div>
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            onClick={() => { setSelectedDate(new Date(event.start_date)); setViewMode('calendar'); }}
                            className="bg-white/80 border-orange-200 text-orange-700 hover:bg-orange-50"
                          >
                            View in Calendar
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-16">
                    <Clock className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                    <p className="text-gray-500 text-lg">No upcoming events</p>
                    <p className="text-gray-400 text-sm">All clear for the next 14 days</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Statistics View */}
          {viewMode === 'stats' && calendarStats && (
            <div className="space-y-8 animate-fadeInUp">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Upcoming Events Card */}
                <div className="bg-gradient-to-br from-white/90 to-white/70 backdrop-blur-glass rounded-2xl p-6 border border-white/50 shadow-premium">
                  <div className="flex items-center justify-between mb-4">
                    <div className="bg-gradient-to-br from-blue-500/20 to-indigo-500/20 rounded-xl p-3">
                      <Clock className="h-6 w-6 text-blue-600" />
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                        {calendarStats.upcoming_events_week}
                      </div>
                      <div className="text-sm text-blue-600/70 font-medium">Next 7 Days</div>
                    </div>
                  </div>
                  <div className="text-sm text-gray-600">Upcoming events this week</div>
                </div>

                {/* Overdue Events Card */}
                <div className="bg-gradient-to-br from-white/90 to-white/70 backdrop-blur-glass rounded-2xl p-6 border border-white/50 shadow-premium">
                  <div className="flex items-center justify-between mb-4">
                    <div className="bg-gradient-to-br from-red-500/20 to-rose-500/20 rounded-xl p-3">
                      <AlertCircle className="h-6 w-6 text-red-600" />
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold bg-gradient-to-r from-red-600 to-rose-600 bg-clip-text text-transparent">
                        {calendarStats.overdue_events}
                      </div>
                      <div className="text-sm text-red-600/70 font-medium">Overdue</div>
                    </div>
                  </div>
                  <div className="text-sm text-gray-600">Events that need attention</div>
                </div>

                {/* Auto-generated Events Card */}
                <div className="bg-gradient-to-br from-white/90 to-white/70 backdrop-blur-glass rounded-2xl p-6 border border-white/50 shadow-premium">
                  <div className="flex items-center justify-between mb-4">
                    <div className="bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-xl p-3">
                      <CheckCircle className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                        {calendarStats.event_sources?.auto_generated || 0}
                      </div>
                      <div className="text-sm text-green-600/70 font-medium">Auto-generated</div>
                    </div>
                  </div>
                  <div className="text-sm text-gray-600">System-generated events</div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Create Event Dialog */}
        <Dialog open={isEventDialogOpen} onOpenChange={setIsEventDialogOpen}>
          <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto bg-white/95 backdrop-blur-premium border border-white/40 rounded-3xl shadow-premium-xl">
            <DialogHeader className="pb-6">
              <div className="flex items-center gap-4">
                <div className="bg-gradient-to-br from-blue-500/20 to-indigo-500/20 rounded-2xl p-4">
                  <Plus className="h-8 w-8 text-blue-600" />
                </div>
                <div>
                  <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                    Create New Event
                  </DialogTitle>
                  <p className="text-gray-600 mt-1">Add a new academic event to the calendar</p>
                </div>
              </div>
            </DialogHeader>

            <form onSubmit={handleCreateEvent} className="space-y-6">
              {/* Event Details */}
              <div className="bg-gradient-to-br from-white/80 to-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50 shadow-premium">
                <h3 className="text-lg font-semibold mb-4 text-gray-900">Event Details</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="title" className="text-sm font-medium text-gray-700">Event Title *</Label>
                    <Input
                      id="title"
                      value={eventForm.title}
                      onChange={(e) => setEventForm({...eventForm, title: e.target.value})}
                      placeholder="Enter event title"
                      required
                      className="bg-white/80 border-blue-200/60 rounded-xl"
                    />
                  </div>

                  <div>
                    <Label htmlFor="description" className="text-sm font-medium text-gray-700">Description</Label>
                    <Textarea
                      id="description"
                      value={eventForm.description}
                      onChange={(e) => setEventForm({...eventForm, description: e.target.value})}
                      placeholder="Event description (optional)"
                      rows={3}
                      className="bg-white/80 border-blue-200/60 rounded-xl resize-none"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="event_type" className="text-sm font-medium text-gray-700">Event Type *</Label>
                      <Select
                        value={eventForm.event_type}
                        onValueChange={(value) => setEventForm({...eventForm, event_type: value})}
                        required
                      >
                        <SelectTrigger className="bg-white/80 border-blue-200/60 rounded-xl">
                          <SelectValue placeholder="Select event type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="exam">📝 Exam</SelectItem>
                          <SelectItem value="holiday">🏖️ Holiday</SelectItem>
                          <SelectItem value="meeting">🤝 Meeting</SelectItem>
                          <SelectItem value="event">🎉 Event</SelectItem>
                          <SelectItem value="deadline">⏰ Deadline</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="term_id" className="text-sm font-medium text-gray-700">Term</Label>
                      <Select
                        value={eventForm.term_id}
                        onValueChange={(value) => setEventForm({...eventForm, term_id: value})}
                      >
                        <SelectTrigger className="bg-white/80 border-blue-200/60 rounded-xl">
                          <SelectValue placeholder="Select term (optional)" />
                        </SelectTrigger>
                        <SelectContent>
                          {terms.map((term: Term) => (
                            <SelectItem key={term.id} value={term.id}>
                              {term.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              </div>

              {/* Date & Time */}
              <div className="bg-gradient-to-br from-white/80 to-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50 shadow-premium">
                <h3 className="text-lg font-semibold mb-4 text-gray-900">Date & Time</h3>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="start_date" className="text-sm font-medium text-gray-700">Start Date *</Label>
                      <Input
                        id="start_date"
                        type="datetime-local"
                        value={eventForm.start_date}
                        onChange={(e) => setEventForm({...eventForm, start_date: e.target.value})}
                        required
                        className="bg-white/80 border-blue-200/60 rounded-xl"
                      />
                    </div>

                    <div>
                      <Label htmlFor="end_date" className="text-sm font-medium text-gray-700">End Date</Label>
                      <Input
                        id="end_date"
                        type="datetime-local"
                        value={eventForm.end_date}
                        onChange={(e) => setEventForm({...eventForm, end_date: e.target.value})}
                        className="bg-white/80 border-blue-200/60 rounded-xl"
                      />
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      id="is_all_day"
                      checked={eventForm.is_all_day}
                      onCheckedChange={(checked) => setEventForm({...eventForm, is_all_day: checked})}
                    />
                    <Label htmlFor="is_all_day" className="text-sm font-medium text-gray-700">All day event</Label>
                  </div>
                </div>
              </div>

              {/* Event Options */}
              <div className="bg-gradient-to-br from-white/80 to-white/60 backdrop-blur-sm rounded-2xl p-6 border border-white/50 shadow-premium">
                <h3 className="text-lg font-semibold mb-4 text-gray-900">Options</h3>
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="is_public"
                      checked={eventForm.is_public}
                      onCheckedChange={(checked) => setEventForm({...eventForm, is_public: checked})}
                    />
                    <Label htmlFor="is_public" className="text-sm font-medium text-gray-700">Public event</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      id="is_recurring"
                      checked={eventForm.is_recurring}
                      onCheckedChange={(checked) => setEventForm({...eventForm, is_recurring: checked})}
                    />
                    <Label htmlFor="is_recurring" className="text-sm font-medium text-gray-700">Recurring event</Label>
                  </div>
                </div>
              </div>

              <div className="flex justify-end gap-4 pt-6 border-t border-white/30">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsEventDialogOpen(false)}
                  className="bg-white/80 hover:bg-white/90 border-gray-300/60 text-gray-700 rounded-xl px-6 py-2.5"
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={createEventMutation.isPending}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl px-8 py-2.5 shadow-premium hover:shadow-premium-lg transition-all duration-300 transform hover:scale-105"
                >
                  {createEventMutation.isPending ? (
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      Creating...
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <Plus className="h-4 w-4" />
                      Create Event
                    </div>
                  )}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>
    </>
  );
};

export default AcademicCalendar;
